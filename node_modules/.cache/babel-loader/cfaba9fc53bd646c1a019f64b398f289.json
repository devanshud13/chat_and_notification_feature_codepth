{"ast":null,"code":"import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Deferred, ErrorFactory, isIndexedDBAvailable, uuidv4, getGlobal, base64, issuedAtTime, calculateBackoffMillis, getModularInstance } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst APP_CHECK_STATES = new Map();\nconst DEFAULT_STATE = {\n  activated: false,\n  tokenObservers: []\n};\nconst DEBUG_STATE = {\n  initialized: false,\n  enabled: false\n};\n/**\r\n * Gets a reference to the state object.\r\n */\n\nfunction getStateReference(app) {\n  return APP_CHECK_STATES.get(app) || Object.assign({}, DEFAULT_STATE);\n}\n/**\r\n * Set once on initialization. The map should hold the same reference to the\r\n * same object until this entry is deleted.\r\n */\n\n\nfunction setInitialState(app, state) {\n  APP_CHECK_STATES.set(app, state);\n  return APP_CHECK_STATES.get(app);\n}\n\nfunction getDebugState() {\n  return DEBUG_STATE;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1';\nconst EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaV3Token';\nconst EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD = 'exchangeRecaptchaEnterpriseToken';\nconst EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\nconst TOKEN_REFRESH_TIME = {\n  /**\r\n   * The offset time before token natural expiration to run the refresh.\r\n   * This is currently 5 minutes.\r\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n\n  /**\r\n   * This is the first retrial wait after an error. This is currently\r\n   * 30 seconds.\r\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n\n  /**\r\n   * This is the maximum retrial wait, currently 16 minutes.\r\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n/**\r\n * One day in millis, for certain error code backoffs.\r\n */\n\nconst ONE_DAY = 24 * 60 * 60 * 1000;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\n\nclass Refresher {\n  constructor(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\n    this.operation = operation;\n    this.retryPolicy = retryPolicy;\n    this.getWaitDuration = getWaitDuration;\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n    this.pending = null;\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error('Proactive refresh lower bound greater than upper bound!');\n    }\n  }\n\n  start() {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop() {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning() {\n    return !!this.pending;\n  }\n\n  async process(hasSucceeded) {\n    this.stop();\n\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded)); // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n      this.pending.resolve();\n      await this.pending.promise;\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  getNextRun(hasSucceeded) {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound; // Return typical wait duration interval after a successful operation.\n\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval; // Double interval for next consecutive error.\n\n      this.nextErrorWaitInterval *= 2; // Make sure next wait interval does not exceed the maximum upper bound.\n\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n\n      return currentErrorWaitInterval;\n    }\n  }\n\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst ERRORS = {\n  [\"already-initialized\"\n  /* AppCheckError.ALREADY_INITIALIZED */\n  ]: 'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' + 'different options. To avoid this error, call initializeAppCheck() with the ' + 'same options as when it was originally called. This will return the ' + 'already initialized instance.',\n  [\"use-before-activation\"\n  /* AppCheckError.USE_BEFORE_ACTIVATION */\n  ]: 'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' + 'Call initializeAppCheck() before instantiating other Firebase services.',\n  [\"fetch-network-error\"\n  /* AppCheckError.FETCH_NETWORK_ERROR */\n  ]: 'Fetch failed to connect to a network. Check Internet connection. ' + 'Original error: {$originalErrorMessage}.',\n  [\"fetch-parse-error\"\n  /* AppCheckError.FETCH_PARSE_ERROR */\n  ]: 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.',\n  [\"fetch-status-error\"\n  /* AppCheckError.FETCH_STATUS_ERROR */\n  ]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [\"storage-open\"\n  /* AppCheckError.STORAGE_OPEN */\n  ]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [\"storage-get\"\n  /* AppCheckError.STORAGE_GET */\n  ]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [\"storage-set\"\n  /* AppCheckError.STORAGE_WRITE */\n  ]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [\"recaptcha-error\"\n  /* AppCheckError.RECAPTCHA_ERROR */\n  ]: 'ReCAPTCHA error.',\n  [\"throttled\"\n  /* AppCheckError.THROTTLED */\n  ]: `Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}`\n};\nconst ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction getRecaptcha() {\n  let isEnterprise = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  var _a;\n\n  if (isEnterprise) {\n    return (_a = self.grecaptcha) === null || _a === void 0 ? void 0 : _a.enterprise;\n  }\n\n  return self.grecaptcha;\n}\n\nfunction ensureActivated(app) {\n  if (!getStateReference(app).activated) {\n    throw ERROR_FACTORY.create(\"use-before-activation\"\n    /* AppCheckError.USE_BEFORE_ACTIVATION */\n    , {\n      appName: app.name\n    });\n  }\n}\n\nfunction getDurationString(durationInMillis) {\n  const totalSeconds = Math.round(durationInMillis / 1000);\n  const days = Math.floor(totalSeconds / (3600 * 24));\n  const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  const minutes = Math.floor((totalSeconds - days * 3600 * 24 - hours * 3600) / 60);\n  const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n  let result = '';\n\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\n\nfunction pad(value) {\n  if (value === 0) {\n    return '00';\n  }\n\n  return value >= 10 ? value.toString() : '0' + value;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function exchangeToken(_ref, heartbeatServiceProvider) {\n  let {\n    url,\n    body\n  } = _ref;\n  const headers = {\n    'Content-Type': 'application/json'\n  }; // If heartbeat service exists, add heartbeat header string to the header.\n\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n\n    if (heartbeatsHeader) {\n      headers['X-Firebase-Client'] = heartbeatsHeader;\n    }\n  }\n\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(\"fetch-network-error\"\n    /* AppCheckError.FETCH_NETWORK_ERROR */\n    , {\n      originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(\"fetch-status-error\"\n    /* AppCheckError.FETCH_STATUS_ERROR */\n    , {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody;\n\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(\"fetch-parse-error\"\n    /* AppCheckError.FETCH_PARSE_ERROR */\n    , {\n      originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\n    });\n  } // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n\n\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(\"fetch-parse-error\"\n    /* AppCheckError.FETCH_PARSE_ERROR */\n    , {\n      originalErrorMessage: `ttl field (timeToLive) is not in standard Protobuf Duration ` + `format: ${responseBody.ttl}`\n    });\n  }\n\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n  const now = Date.now();\n  return {\n    token: responseBody.token,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nfunction getExchangeRecaptchaV3TokenRequest(app, reCAPTCHAToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_v3_token': reCAPTCHAToken\n    }\n  };\n}\n\nfunction getExchangeRecaptchaEnterpriseTokenRequest(app, reCAPTCHAToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\n\nfunction getExchangeDebugTokenRequest(app, debugToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\nlet dbPromise = null;\n\nfunction getDBPromise() {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n\n      request.onerror = event => {\n        var _a;\n\n        reject(ERROR_FACTORY.create(\"storage-open\"\n        /* AppCheckError.STORAGE_OPEN */\n        , {\n          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n        }));\n      };\n\n      request.onupgradeneeded = event => {\n        const db = event.target.result; // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(ERROR_FACTORY.create(\"storage-open\"\n      /* AppCheckError.STORAGE_OPEN */\n      , {\n        originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n      }));\n    }\n  });\n  return dbPromise;\n}\n\nfunction readTokenFromIndexedDB(app) {\n  return read(computeKey(app));\n}\n\nfunction writeTokenToIndexedDB(app, token) {\n  return write(computeKey(app), token);\n}\n\nfunction writeDebugTokenToIndexedDB(token) {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nfunction readDebugTokenFromIndexedDB() {\n  return read(DEBUG_TOKEN_KEY);\n}\n\nasync function write(key, value) {\n  const db = await getDBPromise();\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      var _a;\n\n      reject(ERROR_FACTORY.create(\"storage-set\"\n      /* AppCheckError.STORAGE_WRITE */\n      , {\n        originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    };\n  });\n}\n\nasync function read(key) {\n  const db = await getDBPromise();\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = event.target.result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      var _a;\n\n      reject(ERROR_FACTORY.create(\"storage-get\"\n      /* AppCheckError.STORAGE_GET */\n      , {\n        originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    };\n  });\n}\n\nfunction computeKey(app) {\n  return `${app.options.appId}-${app.name}`;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst logger = new Logger('@firebase/app-check');\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\n\nasync function readTokenFromStorage(app) {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n\n    return token;\n  }\n\n  return undefined;\n}\n/**\r\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n */\n\n\nfunction writeTokenToStorage(app, token) {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nasync function readOrCreateDebugTokenFromStorage() {\n  /**\r\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\r\n   * But it won't happen here, because this function will be called exactly once.\r\n   */\n  let existingDebugToken = undefined;\n\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {// failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4(); // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n\n    writeDebugTokenToIndexedDB(newToken).catch(e => logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`));\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isDebugMode() {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nasync function getDebugToken() {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nfunction initializeDebugMode() {\n  const globals = getGlobal();\n  const debugState = getDebugState(); // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n\n  debugState.initialized = true;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\n    return;\n  }\n\n  debugState.enabled = true;\n  const deferredToken = new Deferred();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\n\n\nconst defaultTokenErrorData = {\n  error: 'UNKNOWN_ERROR'\n};\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\n\nfunction formatDummyToken(tokenErrorData) {\n  return base64.encodeString(JSON.stringify(tokenErrorData),\n  /* webSafe= */\n  false);\n}\n/**\r\n * This function always resolves.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\n\n\nasync function getToken$2(appCheck) {\n  let forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const app = appCheck.app;\n  ensureActivated(app);\n  const state = getStateReference(app);\n  /**\r\n   * First check if there is a token in memory from a previous `getToken()` call.\r\n   */\n\n  let token = state.token;\n  let error = undefined;\n  /**\r\n   * If an invalid token was found in memory, clear token from\r\n   * memory and unset the local variable `token`.\r\n   */\n\n  if (token && !isValid(token)) {\n    state.token = undefined;\n    token = undefined;\n  }\n  /**\r\n   * If there is no valid token in memory, try to load token from indexedDB.\r\n   */\n\n\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n\n    if (cachedToken) {\n      if (isValid(cachedToken)) {\n        token = cachedToken;\n      } else {\n        // If there was an invalid token in the indexedDB cache, clear it.\n        await writeTokenToStorage(app, undefined);\n      }\n    }\n  } // Return the cached token (from either memory or indexedDB) if it's valid\n\n\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  } // Only set to true if this `getToken()` call is making the actual\n  // REST call to the exchange endpoint, versus waiting for an already\n  // in-flight call (see debug and regular exchange endpoint paths below)\n\n\n  let shouldCallListeners = false;\n  /**\r\n   * DEBUG MODE\r\n   * If debug mode is set, and there is no cached token, fetch a new App\r\n   * Check token using the debug token, and return it directly.\r\n   */\n\n  if (isDebugMode()) {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      state.exchangeTokenPromise = exchangeToken(getExchangeDebugTokenRequest(app, await getDebugToken()), appCheck.heartbeatServiceProvider).finally(() => {\n        // Clear promise when settled - either resolved or rejected.\n        state.exchangeTokenPromise = undefined;\n      });\n      shouldCallListeners = true;\n    }\n\n    const tokenFromDebugExchange = await state.exchangeTokenPromise; // Write debug token to indexedDB.\n\n    await writeTokenToStorage(app, tokenFromDebugExchange); // Write debug token to state.\n\n    state.token = tokenFromDebugExchange;\n    return {\n      token: tokenFromDebugExchange.token\n    };\n  }\n  /**\r\n   * There are no valid tokens in memory or indexedDB and we are not in\r\n   * debug mode.\r\n   * Request a new token from the exchange endpoint.\r\n   */\n\n\n  try {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      // state.provider is populated in initializeAppCheck()\n      // ensureActivated() at the top of this function checks that\n      // initializeAppCheck() has been called.\n      state.exchangeTokenPromise = state.provider.getToken().finally(() => {\n        // Clear promise when settled - either resolved or rejected.\n        state.exchangeTokenPromise = undefined;\n      });\n      shouldCallListeners = true;\n    }\n\n    token = await getStateReference(app).exchangeTokenPromise;\n  } catch (e) {\n    if (e.code === `appCheck/${\"throttled\"\n    /* AppCheckError.THROTTLED */\n    }`) {\n      // Warn if throttled, but do not treat it as an error.\n      logger.warn(e.message);\n    } else {\n      // `getToken()` should never throw, but logging error text to console will aid debugging.\n      logger.error(e);\n    } // Always save error to be added to dummy token.\n\n\n    error = e;\n  }\n\n  let interopTokenResult;\n\n  if (!token) {\n    // If token is undefined, there must be an error.\n    // Return a dummy token along with the error.\n    interopTokenResult = makeDummyTokenResult(error);\n  } else if (error) {\n    if (isValid(token)) {\n      // It's also possible a valid token exists, but there's also an error.\n      // (Such as if the token is almost expired, tries to refresh, and\n      // the exchange request fails.)\n      // We add a special error property here so that the refresher will\n      // count this as a failed attempt and use the backoff instead of\n      // retrying repeatedly with no delay, but any 3P listeners will not\n      // be hindered in getting the still-valid token.\n      interopTokenResult = {\n        token: token.token,\n        internalError: error\n      };\n    } else {\n      // No invalid tokens should make it to this step. Memory and cached tokens\n      // are checked. Other tokens are from fresh exchanges. But just in case.\n      interopTokenResult = makeDummyTokenResult(error);\n    }\n  } else {\n    interopTokenResult = {\n      token: token.token\n    }; // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n\n    state.token = token;\n    await writeTokenToStorage(app, token);\n  }\n\n  if (shouldCallListeners) {\n    notifyTokenListeners(app, interopTokenResult);\n  }\n\n  return interopTokenResult;\n}\n/**\r\n * Internal API for limited use tokens. Skips all FAC state and simply calls\r\n * the underlying provider.\r\n */\n\n\nasync function getLimitedUseToken$1(appCheck) {\n  const app = appCheck.app;\n  ensureActivated(app);\n  const {\n    provider\n  } = getStateReference(app);\n\n  if (isDebugMode()) {\n    const debugToken = await getDebugToken();\n    const {\n      token\n    } = await exchangeToken(getExchangeDebugTokenRequest(app, debugToken), appCheck.heartbeatServiceProvider);\n    return {\n      token\n    };\n  } else {\n    // provider is definitely valid since we ensure AppCheck was activated\n    const {\n      token\n    } = await provider.getToken();\n    return {\n      token\n    };\n  }\n}\n\nfunction addTokenListener(appCheck, type, listener, onError) {\n  const {\n    app\n  } = appCheck;\n  const state = getStateReference(app);\n  const tokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  state.tokenObservers = [...state.tokenObservers, tokenObserver]; // Invoke the listener async immediately if there is a valid token\n  // in memory.\n\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve().then(() => {\n      listener({\n        token: validToken.token\n      });\n      initTokenRefresher(appCheck);\n    }).catch(() => {\n      /* we don't care about exceptions thrown in listeners */\n    });\n  }\n  /**\r\n   * Wait for any cached token promise to resolve before starting the token\r\n   * refresher. The refresher checks to see if there is an existing token\r\n   * in state and calls the exchange endpoint if not. We should first let the\r\n   * IndexedDB check have a chance to populate state if it can.\r\n   *\r\n   * Listener call isn't needed here because cachedTokenPromise will call any\r\n   * listeners that exist when it resolves.\r\n   */\n  // state.cachedTokenPromise is always populated in `activate()`.\n\n\n  void state.cachedTokenPromise.then(() => initTokenRefresher(appCheck));\n}\n\nfunction removeTokenListener(app, listener) {\n  const state = getStateReference(app);\n  const newObservers = state.tokenObservers.filter(tokenObserver => tokenObserver.next !== listener);\n\n  if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) {\n    state.tokenRefresher.stop();\n  }\n\n  state.tokenObservers = newObservers;\n}\n/**\r\n * Logic to create and start refresher as needed.\r\n */\n\n\nfunction initTokenRefresher(appCheck) {\n  const {\n    app\n  } = appCheck;\n  const state = getStateReference(app); // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n\n  let refresher = state.tokenRefresher;\n\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    state.tokenRefresher = refresher;\n  }\n\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\n\nfunction createTokenRefresher(appCheck) {\n  const {\n    app\n  } = appCheck;\n  return new Refresher( // Keep in mind when this fails for any reason other than the ones\n  // for which we should retry, it will effectively stop the proactive refresh.\n  async () => {\n    const state = getStateReference(app); // If there is no token, we will try to load it from storage and use it\n    // If there is a token, we force refresh it because we know it's going to expire soon\n\n    let result;\n\n    if (!state.token) {\n      result = await getToken$2(appCheck);\n    } else {\n      result = await getToken$2(appCheck, true);\n    }\n    /**\r\n     * getToken() always resolves. In case the result has an error field defined, it means\r\n     * the operation failed, and we should retry.\r\n     */\n\n\n    if (result.error) {\n      throw result.error;\n    }\n    /**\r\n     * A special `internalError` field reflects that there was an error\r\n     * getting a new token from the exchange endpoint, but there's still a\r\n     * previous token that's valid for now and this should be passed to 2P/3P\r\n     * requests for a token. But we want this callback (`this.operation` in\r\n     * `Refresher`) to throw in order to kick off the Refresher's retry\r\n     * backoff. (Setting `hasSucceeded` to false.)\r\n     */\n\n\n    if (result.internalError) {\n      throw result.internalError;\n    }\n  }, () => {\n    return true;\n  }, () => {\n    const state = getStateReference(app);\n\n    if (state.token) {\n      // issuedAtTime + (50% * total TTL) + 5 minutes\n      let nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 5 * 60 * 1000; // Do not allow refresh time to be past (expireTime - 5 minutes)\n\n      const latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\n      nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\n      return Math.max(0, nextRefreshTimeMillis - Date.now());\n    } else {\n      return 0;\n    }\n  }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\n}\n\nfunction notifyTokenListeners(app, token) {\n  const observers = getStateReference(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === \"EXTERNAL\"\n      /* ListenerType.EXTERNAL */\n      && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {// Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nfunction isValid(token) {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error) {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * AppCheck Service class.\r\n */\n\n\nclass AppCheckService {\n  constructor(app, heartbeatServiceProvider) {\n    this.app = app;\n    this.heartbeatServiceProvider = heartbeatServiceProvider;\n  }\n\n  _delete() {\n    const {\n      tokenObservers\n    } = getStateReference(this.app);\n\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nfunction factory(app, heartbeatServiceProvider) {\n  return new AppCheckService(app, heartbeatServiceProvider);\n}\n\nfunction internalFactory(appCheck) {\n  return {\n    getToken: forceRefresh => getToken$2(appCheck, forceRefresh),\n    getLimitedUseToken: () => getLimitedUseToken$1(appCheck),\n    addTokenListener: listener => addTokenListener(appCheck, \"INTERNAL\"\n    /* ListenerType.INTERNAL */\n    , listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\n\nconst name = \"@firebase/app-check\";\nconst version = \"0.8.0\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nconst RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js';\n\nfunction initializeV3(app, siteKey) {\n  const initialized = new Deferred();\n  const state = getStateReference(app);\n  state.reCAPTCHAState = {\n    initialized\n  };\n  const divId = makeDiv(app);\n  const grecaptcha = getRecaptcha(false);\n\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(() => {\n      const grecaptcha = getRecaptcha(false);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n\n  return initialized.promise;\n}\n\nfunction initializeEnterprise(app, siteKey) {\n  const initialized = new Deferred();\n  const state = getStateReference(app);\n  state.reCAPTCHAState = {\n    initialized\n  };\n  const divId = makeDiv(app);\n  const grecaptcha = getRecaptcha(true);\n\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(() => {\n      const grecaptcha = getRecaptcha(true);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n\n  return initialized.promise;\n}\n/**\r\n * Add listener to render the widget and resolve the promise when\r\n * the grecaptcha.ready() event fires.\r\n */\n\n\nfunction queueWidgetRender(app, siteKey, grecaptcha, container, initialized) {\n  grecaptcha.ready(() => {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n/**\r\n * Add invisible div to page.\r\n */\n\n\nfunction makeDiv(app) {\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\n\nasync function getToken$1(app) {\n  ensureActivated(app); // ensureActivated() guarantees that reCAPTCHAState is set\n\n  const reCAPTCHAState = getStateReference(app).reCAPTCHAState;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getStateReference(app).reCAPTCHAState;\n    recaptcha.ready(() => {\n      resolve( // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n      recaptcha.execute(reCAPTCHAState.widgetId, {\n        action: 'fire_app_check'\n      }));\n    });\n  });\n}\n/**\r\n *\r\n * @param app\r\n * @param container - Id of a HTML element.\r\n */\n\n\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible',\n    // Success callback - set state\n    callback: () => {\n      getStateReference(app).reCAPTCHAState.succeeded = true;\n    },\n    // Failure callback - set state\n    'error-callback': () => {\n      getStateReference(app).reCAPTCHAState.succeeded = false;\n    }\n  });\n  const state = getStateReference(app);\n  state.reCAPTCHAState = Object.assign(Object.assign({}, state.reCAPTCHAState), {\n    // state.reCAPTCHAState is set in the initialize()\n    widgetId\n  });\n}\n\nfunction loadReCAPTCHAV3Script(onload) {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\nfunction loadReCAPTCHAEnterpriseScript(onload) {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\n\n\nclass ReCaptchaV3Provider {\n  /**\r\n   * Create a ReCaptchaV3Provider instance.\r\n   * @param siteKey - ReCAPTCHA V3 siteKey.\r\n   */\n  constructor(_siteKey) {\n    this._siteKey = _siteKey;\n    /**\r\n     * Throttle requests on certain error codes to prevent too many retries\r\n     * in a short time.\r\n     */\n\n    this._throttleData = null;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n\n\n  async getToken() {\n    var _a, _b, _c;\n\n    throwIfThrottled(this._throttleData); // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n\n    const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(\"recaptcha-error\"\n      /* AppCheckError.RECAPTCHA_ERROR */\n      );\n    }); // Check if a failure state was set by the recaptcha \"error-callback\".\n\n    if (!((_a = getStateReference(this._app).reCAPTCHAState) === null || _a === void 0 ? void 0 : _a.succeeded)) {\n      throw ERROR_FACTORY.create(\"recaptcha-error\"\n      /* AppCheckError.RECAPTCHA_ERROR */\n      );\n    }\n\n    let result;\n\n    try {\n      result = await exchangeToken(getExchangeRecaptchaV3TokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\n    } catch (e) {\n      if ((_b = e.code) === null || _b === void 0 ? void 0 : _b.includes(\"fetch-status-error\"\n      /* AppCheckError.FETCH_STATUS_ERROR */\n      )) {\n        this._throttleData = setBackoff(Number((_c = e.customData) === null || _c === void 0 ? void 0 : _c.httpStatus), this._throttleData);\n        throw ERROR_FACTORY.create(\"throttled\"\n        /* AppCheckError.THROTTLED */\n        , {\n          time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    } // If successful, clear throttle data.\n\n\n    this._throttleData = null;\n    return result;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  initialize(app) {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeV3(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  isEqual(otherProvider) {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\r\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\n\n\nclass ReCaptchaEnterpriseProvider {\n  /**\r\n   * Create a ReCaptchaEnterpriseProvider instance.\r\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\r\n   */\n  constructor(_siteKey) {\n    this._siteKey = _siteKey;\n    /**\r\n     * Throttle requests on certain error codes to prevent too many retries\r\n     * in a short time.\r\n     */\n\n    this._throttleData = null;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n\n\n  async getToken() {\n    var _a, _b, _c;\n\n    throwIfThrottled(this._throttleData); // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n\n    const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(\"recaptcha-error\"\n      /* AppCheckError.RECAPTCHA_ERROR */\n      );\n    }); // Check if a failure state was set by the recaptcha \"error-callback\".\n\n    if (!((_a = getStateReference(this._app).reCAPTCHAState) === null || _a === void 0 ? void 0 : _a.succeeded)) {\n      throw ERROR_FACTORY.create(\"recaptcha-error\"\n      /* AppCheckError.RECAPTCHA_ERROR */\n      );\n    }\n\n    let result;\n\n    try {\n      result = await exchangeToken(getExchangeRecaptchaEnterpriseTokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\n    } catch (e) {\n      if ((_b = e.code) === null || _b === void 0 ? void 0 : _b.includes(\"fetch-status-error\"\n      /* AppCheckError.FETCH_STATUS_ERROR */\n      )) {\n        this._throttleData = setBackoff(Number((_c = e.customData) === null || _c === void 0 ? void 0 : _c.httpStatus), this._throttleData);\n        throw ERROR_FACTORY.create(\"throttled\"\n        /* AppCheckError.THROTTLED */\n        , {\n          time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    } // If successful, clear throttle data.\n\n\n    this._throttleData = null;\n    return result;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  initialize(app) {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeEnterprise(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  isEqual(otherProvider) {\n    if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\r\n * Custom provider class.\r\n * @public\r\n */\n\n\nclass CustomProvider {\n  constructor(_customProviderOptions) {\n    this._customProviderOptions = _customProviderOptions;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  async getToken() {\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken(); // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token); // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n\n    const issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1000 : Date.now();\n    return Object.assign(Object.assign({}, customToken), {\n      issuedAtTimeMillis\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  initialize(app) {\n    this._app = app;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  isEqual(otherProvider) {\n    if (otherProvider instanceof CustomProvider) {\n      return this._customProviderOptions.getToken.toString() === otherProvider._customProviderOptions.getToken.toString();\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\r\n * Set throttle data to block requests until after a certain time\r\n * depending on the failed request's status code.\r\n * @param httpStatus - Status code of failed request.\r\n * @param throttleData - `ThrottleData` object containing previous throttle\r\n * data state.\r\n * @returns Data about current throttle state and expiration time.\r\n */\n\n\nfunction setBackoff(httpStatus, throttleData) {\n  /**\r\n   * Block retries for 1 day for the following error codes:\r\n   *\r\n   * 404: Likely malformed URL.\r\n   *\r\n   * 403:\r\n   * - Attestation failed\r\n   * - Wrong API key\r\n   * - Project deleted\r\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus\n    };\n  } else {\n    /**\r\n     * For all other error codes, the time when it is ok to retry again\r\n     * is based on exponential backoff.\r\n     */\n    const backoffCount = throttleData ? throttleData.backoffCount : 0;\n    const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus\n    };\n  }\n}\n\nfunction throwIfThrottled(throttleData) {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(\"throttled\"\n      /* AppCheckError.THROTTLED */\n      , {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Activate App Check for the given app. Can be called only once per app.\r\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\r\n * @param options - App Check initialization options\r\n * @public\r\n */\n\n\nfunction initializeAppCheck() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  let options = arguments.length > 1 ? arguments[1] : undefined;\n  app = getModularInstance(app);\n\n  const provider = _getProvider(app, 'app-check'); // Ensure initializeDebugMode() is only called once.\n\n\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  } // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n\n\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(token => // Not using logger because I don't think we ever want this accidentally hidden.\n    console.log(`App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`));\n  }\n\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions();\n\n    if (initialOptions.isTokenAutoRefreshEnabled === options.isTokenAutoRefreshEnabled && initialOptions.provider.isEqual(options.provider)) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\"\n      /* AppCheckError.ALREADY_INITIALIZED */\n      , {\n        appName: app.name\n      });\n    }\n  }\n\n  const appCheck = provider.initialize({\n    options\n  });\n\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled); // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n\n\n  if (getStateReference(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    addTokenListener(appCheck, \"INTERNAL\"\n    /* ListenerType.INTERNAL */\n    , () => {});\n  }\n\n  return appCheck;\n}\n/**\r\n * Activate App Check\r\n * @param app - Firebase app to activate App Check for.\r\n * @param provider - reCAPTCHA v3 provider or\r\n * custom token provider.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. If undefined, defaults to the\r\n * value of `app.automaticDataCollectionEnabled`, which defaults to\r\n * false and can be set in the app config.\r\n */\n\n\nfunction _activate(app, provider, isTokenAutoRefreshEnabled) {\n  // Create an entry in the APP_CHECK_STATES map. Further changes should\n  // directly mutate this object.\n  const state = setInitialState(app, Object.assign({}, DEFAULT_STATE));\n  state.activated = true;\n  state.provider = provider; // Read cached token from storage if it exists and store it in memory.\n\n  state.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      state.token = cachedToken; // notify all listeners with the cached token\n\n      notifyTokenListeners(app, {\n        token: cachedToken.token\n      });\n    }\n\n    return cachedToken;\n  }); // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n\n  state.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled === undefined ? app.automaticDataCollectionEnabled : isTokenAutoRefreshEnabled;\n  state.provider.initialize(app);\n}\n/**\r\n * Set whether App Check will automatically refresh tokens as needed.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. This overrides any value set\r\n * during `initializeAppCheck()`.\r\n * @public\r\n */\n\n\nfunction setTokenAutoRefreshEnabled(appCheckInstance, isTokenAutoRefreshEnabled) {\n  const app = appCheckInstance.app;\n  const state = getStateReference(app); // This will exist if any product libraries have called\n  // `addTokenListener()`\n\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n\n  state.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled;\n}\n/**\r\n * Get the current App Check token. Attaches to the most recent\r\n * in-flight request if one is present. Returns null if no token\r\n * is present and no token requests are in-flight.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param forceRefresh - If true, will always try to fetch a fresh token.\r\n * If false, will use a cached token if found in storage.\r\n * @public\r\n */\n\n\nasync function getToken(appCheckInstance, forceRefresh) {\n  const result = await getToken$2(appCheckInstance, forceRefresh);\n\n  if (result.error) {\n    throw result.error;\n  }\n\n  return {\n    token: result.token\n  };\n}\n/**\r\n * Requests a Firebase App Check token. This method should be used\r\n * only if you need to authorize requests to a non-Firebase backend.\r\n *\r\n * Returns limited-use tokens that are intended for use with your\r\n * non-Firebase backend endpoints that are protected with\r\n * <a href=\"https://firebase.google.com/docs/app-check/custom-resource-backend#replay-protection\">\r\n * Replay Protection</a>. This method\r\n * does not affect the token generation behavior of the\r\n * #getAppCheckToken() method.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @returns The limited use token.\r\n * @public\r\n */\n\n\nfunction getLimitedUseToken(appCheckInstance) {\n  return getLimitedUseToken$1(appCheckInstance);\n}\n/**\r\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\r\n * pattern for public use.\r\n */\n\n\nfunction onTokenChanged(appCheckInstance, onNextOrObserver, onError,\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nonCompletion) {\n  let nextFn = () => {};\n\n  let errorFn = () => {};\n\n  if (onNextOrObserver.next != null) {\n    nextFn = onNextOrObserver.next.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver;\n  }\n\n  if (onNextOrObserver.error != null) {\n    errorFn = onNextOrObserver.error.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n\n  addTokenListener(appCheckInstance, \"EXTERNAL\"\n  /* ListenerType.EXTERNAL */\n  , nextFn, errorFn);\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n/**\r\n * Firebase App Check\r\n *\r\n * @packageDocumentation\r\n */\n\n\nconst APP_CHECK_NAME = 'app-check';\nconst APP_CHECK_NAME_INTERNAL = 'app-check-internal';\n\nfunction registerAppCheck() {\n  // The public interface\n  _registerComponent(new Component(APP_CHECK_NAME, container => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    const heartbeatServiceProvider = container.getProvider('heartbeat');\n    return factory(app, heartbeatServiceProvider);\n  }, \"PUBLIC\"\n  /* ComponentType.PUBLIC */\n  ).setInstantiationMode(\"EXPLICIT\"\n  /* InstantiationMode.EXPLICIT */\n  )\n  /**\r\n   * Initialize app-check-internal after app-check is initialized to make AppCheck available to\r\n   * other Firebase SDKs\r\n   */\n  .setInstanceCreatedCallback((container, _identifier, _appcheckService) => {\n    container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n  })); // The internal interface used by other Firebase products\n\n\n  _registerComponent(new Component(APP_CHECK_NAME_INTERNAL, container => {\n    const appCheck = container.getProvider('app-check').getImmediate();\n    return internalFactory(appCheck);\n  }, \"PUBLIC\"\n  /* ComponentType.PUBLIC */\n  ).setInstantiationMode(\"EXPLICIT\"\n  /* InstantiationMode.EXPLICIT */\n  ));\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\nexport { CustomProvider, ReCaptchaEnterpriseProvider, ReCaptchaV3Provider, getLimitedUseToken, getToken, initializeAppCheck, onTokenChanged, setTokenAutoRefreshEnabled };","map":{"version":3,"mappings":"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","names":["APP_CHECK_STATES","Map","DEFAULT_STATE","activated","tokenObservers","DEBUG_STATE","initialized","enabled","getStateReference","app","get","Object","state","set","getDebugState","BASE_ENDPOINT","EXCHANGE_RECAPTCHA_TOKEN_METHOD","EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD","EXCHANGE_DEBUG_TOKEN_METHOD","TOKEN_REFRESH_TIME","OFFSET_DURATION","RETRIAL_MIN_WAIT","RETRIAL_MAX_WAIT","ONE_DAY","Refresher","constructor","retryPolicy","getWaitDuration","lowerBound","upperBound","operation","pending","nextErrorWaitInterval","Error","start","process","catch","stop","reject","isRunning","hasSucceeded","Deferred","sleep","getNextRun","resolve","promise","error","currentErrorWaitInterval","ms","Promise","setTimeout","ERRORS","ERROR_FACTORY","ErrorFactory","isEnterprise","grecaptcha","_a","enterprise","self","ensureActivated","create","appName","name","getDurationString","durationInMillis","totalSeconds","Math","round","days","floor","hours","minutes","seconds","result","pad","value","toString","exchangeToken","heartbeatServiceProvider","url","body","headers","heartbeatService","getImmediate","optional","heartbeatsHeader","getHeartbeatsHeader","options","method","JSON","stringify","response","fetch","originalError","originalErrorMessage","message","status","httpStatus","responseBody","json","match","ttl","isNaN","Number","timeToLiveAsNumber","now","Date","token","expireTimeMillis","issuedAtTimeMillis","reCAPTCHAToken","projectId","appId","apiKey","debugToken","debug_token","DB_NAME","DB_VERSION","STORE_NAME","DEBUG_TOKEN_KEY","dbPromise","getDBPromise","request","indexedDB","open","onsuccess","event","target","onerror","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","e","readTokenFromIndexedDB","read","computeKey","write","writeDebugTokenToIndexedDB","readDebugTokenFromIndexedDB","key","transaction","store","objectStore","put","compositeKey","_event","undefined","logger","Logger","readTokenFromStorage","isIndexedDBAvailable","warn","writeTokenToIndexedDB","readOrCreateDebugTokenFromStorage","existingDebugToken","_e","newToken","uuidv4","isDebugMode","debugState","getDebugToken","initializeDebugMode","globals","getGlobal","FIREBASE_APPCHECK_DEBUG_TOKEN","deferredToken","defaultTokenErrorData","formatDummyToken","tokenErrorData","base64","encodeString","getToken","appCheck","forceRefresh","isValid","cachedToken","cachedTokenPromise","writeTokenToStorage","shouldCallListeners","exchangeTokenPromise","getExchangeDebugTokenRequest","finally","tokenFromDebugExchange","provider","code","interopTokenResult","makeDummyTokenResult","internalError","notifyTokenListeners","getLimitedUseToken","addTokenListener","type","listener","onError","tokenObserver","next","validToken","then","initTokenRefresher","newObservers","filter","length","tokenRefresher","refresher","createTokenRefresher","isTokenAutoRefreshEnabled","nextRefreshTimeMillis","latestAllowableRefresh","min","max","observers","observer","AppCheckService","_delete","removeTokenListener","internalFactory","RECAPTCHA_URL","RECAPTCHA_ENTERPRISE_URL","siteKey","reCAPTCHAState","divId","makeDiv","getRecaptcha","loadReCAPTCHAV3Script","queueWidgetRender","loadReCAPTCHAEnterpriseScript","container","ready","renderInvisibleWidget","invisibleDiv","document","createElement","id","style","display","appendChild","recaptcha","_reject","execute","widgetId","action","render","sitekey","size","callback","succeeded","onload","script","src","head","ReCaptchaV3Provider","_siteKey","_throttleData","throwIfThrottled","attestedClaimsToken","getReCAPTCHAToken","_app","getExchangeRecaptchaV3TokenRequest","_heartbeatServiceProvider","_b","setBackoff","_c","customData","time","allowRequestsAfter","initialize","_getProvider","initializeRecaptchaV3","isEqual","otherProvider","ReCaptchaEnterpriseProvider","getExchangeRecaptchaEnterpriseTokenRequest","initializeRecaptchaEnterprise","CustomProvider","_customProviderOptions","customToken","issuedAtTimeSeconds","issuedAtTime","throttleData","backoffCount","backoffMillis","calculateBackoffMillis","initializeAppCheck","getApp","getModularInstance","console","log","isInitialized","existingInstance","initialOptions","getOptions","_activate","setInitialState","automaticDataCollectionEnabled","appCheckInstance","getTokenInternal","getLimitedUseTokenInternal","onTokenChanged","onNextOrObserver","onCompletion","nextFn","errorFn","bind","APP_CHECK_NAME","APP_CHECK_NAME_INTERNAL","registerAppCheck","_registerComponent","Component","getProvider","factory","setInstantiationMode","setInstanceCreatedCallback","_identifier","_appcheckService","registerVersion","version"],"sources":["C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\app-check\\src\\state.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\app-check\\src\\constants.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\app-check\\src\\proactive-refresh.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\app-check\\src\\errors.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\app-check\\src\\util.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\app-check\\src\\client.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\app-check\\src\\indexeddb.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\app-check\\src\\logger.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\app-check\\src\\storage.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\app-check\\src\\debug.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\app-check\\src\\internal-api.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\app-check\\src\\factory.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\app-check\\src\\recaptcha.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\app-check\\src\\providers.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\app-check\\src\\api.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\app-check\\src\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckProvider,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver\n} from './types';\nimport { Refresher } from './proactive-refresh';\nimport { Deferred } from '@firebase/util';\nimport { GreCAPTCHA } from './recaptcha';\nexport interface AppCheckState {\n  activated: boolean;\n  tokenObservers: AppCheckTokenObserver[];\n  provider?: AppCheckProvider;\n  token?: AppCheckTokenInternal;\n  cachedTokenPromise?: Promise<AppCheckTokenInternal | undefined>;\n  exchangeTokenPromise?: Promise<AppCheckTokenInternal>;\n  tokenRefresher?: Refresher;\n  reCAPTCHAState?: ReCAPTCHAState;\n  isTokenAutoRefreshEnabled?: boolean;\n}\n\nexport interface ReCAPTCHAState {\n  initialized: Deferred<GreCAPTCHA>;\n  widgetId?: string;\n  // True if the most recent recaptcha check succeeded.\n  succeeded?: boolean;\n}\n\nexport interface DebugState {\n  initialized: boolean;\n  enabled: boolean;\n  token?: Deferred<string>;\n}\n\nconst APP_CHECK_STATES = new Map<FirebaseApp, AppCheckState>();\nexport const DEFAULT_STATE: AppCheckState = {\n  activated: false,\n  tokenObservers: []\n};\n\nconst DEBUG_STATE: DebugState = {\n  initialized: false,\n  enabled: false\n};\n\n/**\n * Gets a reference to the state object.\n */\nexport function getStateReference(app: FirebaseApp): AppCheckState {\n  return APP_CHECK_STATES.get(app) || { ...DEFAULT_STATE };\n}\n\n/**\n * Set once on initialization. The map should hold the same reference to the\n * same object until this entry is deleted.\n */\nexport function setInitialState(\n  app: FirebaseApp,\n  state: AppCheckState\n): AppCheckState {\n  APP_CHECK_STATES.set(app, state);\n  return APP_CHECK_STATES.get(app) as AppCheckState;\n}\n\n// for testing only\nexport function clearState(): void {\n  APP_CHECK_STATES.clear();\n  DEBUG_STATE.enabled = false;\n  DEBUG_STATE.token = undefined;\n  DEBUG_STATE.initialized = false;\n}\n\nexport function getDebugState(): DebugState {\n  return DEBUG_STATE;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BASE_ENDPOINT =\n  'https://content-firebaseappcheck.googleapis.com/v1';\n\nexport const EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaV3Token';\nexport const EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD =\n  'exchangeRecaptchaEnterpriseToken';\nexport const EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\n\nexport const TOKEN_REFRESH_TIME = {\n  /**\n   * The offset time before token natural expiration to run the refresh.\n   * This is currently 5 minutes.\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\n   * This is the first retrial wait after an error. This is currently\n   * 30 seconds.\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\n   * This is the maximum retrial wait, currently 16 minutes.\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n\n/**\n * One day in millis, for certain error code backoffs.\n */\nexport const ONE_DAY = 24 * 60 * 60 * 1000;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\n/**\n * Port from auth proactiverefresh.js\n *\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nexport class Refresher {\n  private pending: Deferred<unknown> | null = null;\n  private nextErrorWaitInterval: number;\n  constructor(\n    private readonly operation: () => Promise<unknown>,\n    private readonly retryPolicy: (error: unknown) => boolean,\n    private readonly getWaitDuration: () => number,\n    private readonly lowerBound: number,\n    private readonly upperBound: number\n  ) {\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error(\n        'Proactive refresh lower bound greater than upper bound!'\n      );\n    }\n  }\n\n  start(): void {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop(): void {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning(): boolean {\n    return !!this.pending;\n  }\n\n  private async process(hasSucceeded: boolean): Promise<void> {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded));\n\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n\n      this.pending.resolve();\n      await this.pending.promise;\n\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  private getNextRun(hasSucceeded: boolean): number {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  ALREADY_INITIALIZED = 'already-initialized',\n  USE_BEFORE_ACTIVATION = 'use-before-activation',\n  FETCH_NETWORK_ERROR = 'fetch-network-error',\n  FETCH_PARSE_ERROR = 'fetch-parse-error',\n  FETCH_STATUS_ERROR = 'fetch-status-error',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  RECAPTCHA_ERROR = 'recaptcha-error',\n  THROTTLED = 'throttled'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.ALREADY_INITIALIZED]:\n    'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' +\n    'different options. To avoid this error, call initializeAppCheck() with the ' +\n    'same options as when it was originally called. This will return the ' +\n    'already initialized instance.',\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' +\n    'Call initializeAppCheck() before instantiating other Firebase services.',\n  [AppCheckError.FETCH_NETWORK_ERROR]:\n    'Fetch failed to connect to a network. Check Internet connection. ' +\n    'Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_PARSE_ERROR]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_STATUS_ERROR]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [AppCheckError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.RECAPTCHA_ERROR]: 'ReCAPTCHA error.',\n  [AppCheckError.THROTTLED]: `Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}`\n};\n\ninterface ErrorParams {\n  [AppCheckError.ALREADY_INITIALIZED]: { appName: string };\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n  [AppCheckError.FETCH_NETWORK_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_PARSE_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_STATUS_ERROR]: { httpStatus: number };\n  [AppCheckError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_WRITE]: { originalErrorMessage?: string };\n  [AppCheckError.THROTTLED]: { time: string; httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GreCAPTCHA } from './recaptcha';\nimport { getStateReference } from './state';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { FirebaseApp } from '@firebase/app';\n\nexport function getRecaptcha(\n  isEnterprise: boolean = false\n): GreCAPTCHA | undefined {\n  if (isEnterprise) {\n    return self.grecaptcha?.enterprise;\n  }\n  return self.grecaptcha;\n}\n\nexport function ensureActivated(app: FirebaseApp): void {\n  if (!getStateReference(app).activated) {\n    throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n      appName: app.name\n    });\n  }\n}\n\nexport function getDurationString(durationInMillis: number): string {\n  const totalSeconds = Math.round(durationInMillis / 1000);\n  const days = Math.floor(totalSeconds / (3600 * 24));\n  const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  const minutes = Math.floor(\n    (totalSeconds - days * 3600 * 24 - hours * 3600) / 60\n  );\n  const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n\n  let result = '';\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\n\nfunction pad(value: number): string {\n  if (value === 0) {\n    return '00';\n  }\n  return value >= 10 ? value.toString() : '0' + value;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BASE_ENDPOINT,\n  EXCHANGE_DEBUG_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_TOKEN_METHOD\n} from './constants';\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { Provider } from '@firebase/component';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Response JSON returned from AppCheck server endpoint.\n */\ninterface AppCheckResponse {\n  token: string;\n  // timeToLive\n  ttl: string;\n}\n\ninterface AppCheckRequest {\n  url: string;\n  body: { [key: string]: string };\n}\n\nexport async function exchangeToken(\n  { url, body }: AppCheckRequest,\n  heartbeatServiceProvider: Provider<'heartbeat'>\n): Promise<AppCheckTokenInternal> {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json'\n  };\n  // If heartbeat service exists, add heartbeat header string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers['X-Firebase-Client'] = heartbeatsHeader;\n    }\n  }\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_NETWORK_ERROR, {\n      originalErrorMessage: (originalError as Error)?.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_STATUS_ERROR, {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody: AppCheckResponse;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage: (originalError as Error)?.message\n    });\n  }\n\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage:\n        `ttl field (timeToLive) is not in standard Protobuf Duration ` +\n        `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n\n  const now = Date.now();\n  return {\n    token: responseBody.token,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nexport function getExchangeRecaptchaV3TokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_v3_token': reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeRecaptchaEnterpriseTokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeDebugTokenRequest(\n  app: FirebaseApp,\n  debugToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { AppCheckTokenInternal } from './types';\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\n\nlet dbPromise: Promise<IDBDatabase> | null = null;\nfunction getDBPromise(): Promise<IDBDatabase> {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n\n      request.onerror = event => {\n        reject(\n          ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n            originalErrorMessage: (event.target as IDBRequest).error?.message\n          })\n        );\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n          originalErrorMessage: (e as Error)?.message\n        })\n      );\n    }\n  });\n\n  return dbPromise;\n}\n\nexport function readTokenFromIndexedDB(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  return read(computeKey(app)) as Promise<AppCheckTokenInternal | undefined>;\n}\n\nexport function writeTokenToIndexedDB(\n  app: FirebaseApp,\n  token?: AppCheckTokenInternal\n): Promise<void> {\n  return write(computeKey(app), token);\n}\n\nexport function writeDebugTokenToIndexedDB(token: string): Promise<void> {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nexport function readDebugTokenFromIndexedDB(): Promise<string | undefined> {\n  return read(DEBUG_TOKEN_KEY) as Promise<string | undefined>;\n}\n\nasync function write(key: string, value: unknown): Promise<void> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_WRITE, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nasync function read(key: string): Promise<unknown> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = (event.target as IDBRequest).result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_GET, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.options.appId}-${app.name}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-check');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { isIndexedDBAvailable, uuidv4 } from '@firebase/util';\nimport {\n  readDebugTokenFromIndexedDB,\n  readTokenFromIndexedDB,\n  writeDebugTokenToIndexedDB,\n  writeTokenToIndexedDB\n} from './indexeddb';\nimport { logger } from './logger';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\n */\nexport async function readTokenFromStorage(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n    return token;\n  }\n\n  return undefined;\n}\n\n/**\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\n */\nexport function writeTokenToStorage(\n  app: FirebaseApp,\n  token?: AppCheckTokenInternal\n): Promise<void> {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nexport async function readOrCreateDebugTokenFromStorage(): Promise<string> {\n  /**\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\n   * But it won't happen here, because this function will be called exactly once.\n   */\n  let existingDebugToken: string | undefined = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e =>\n      logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`)\n    );\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getDebugState } from './state';\nimport { readOrCreateDebugTokenFromStorage } from './storage';\nimport { Deferred, getGlobal } from '@firebase/util';\n\ndeclare global {\n  // var must be used for global scopes\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#type-checking-for-globalthis\n  // eslint-disable-next-line no-var\n  var FIREBASE_APPCHECK_DEBUG_TOKEN: boolean | string | undefined;\n}\n\nexport function isDebugMode(): boolean {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nexport async function getDebugToken(): Promise<string> {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nexport function initializeDebugMode(): void {\n  const globals = getGlobal();\n  const debugState = getDebugState();\n  // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n  debugState.initialized = true;\n\n  if (\n    typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\n    globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true\n  ) {\n    return;\n  }\n\n  debugState.enabled = true;\n  const deferredToken = new Deferred<string>();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckTokenResult,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver,\n  ListenerType\n} from './types';\nimport { AppCheckTokenListener } from './public-types';\nimport { getStateReference } from './state';\nimport { TOKEN_REFRESH_TIME } from './constants';\nimport { Refresher } from './proactive-refresh';\nimport { ensureActivated } from './util';\nimport { exchangeToken, getExchangeDebugTokenRequest } from './client';\nimport { writeTokenToStorage } from './storage';\nimport { getDebugToken, isDebugMode } from './debug';\nimport { base64, FirebaseError } from '@firebase/util';\nimport { logger } from './logger';\nimport { AppCheckService } from './factory';\nimport { AppCheckError } from './errors';\n\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nexport const defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\n\n/**\n * Stringify and base64 encode token error data.\n *\n * @param tokenError Error data, currently hardcoded.\n */\nexport function formatDummyToken(\n  tokenErrorData: Record<string, string>\n): string {\n  return base64.encodeString(\n    JSON.stringify(tokenErrorData),\n    /* webSafe= */ false\n  );\n}\n\n/**\n * This function always resolves.\n * The result will contain an error field if there is any error.\n * In case there is an error, the token field in the result will be populated with a dummy value\n */\nexport async function getToken(\n  appCheck: AppCheckService,\n  forceRefresh = false\n): Promise<AppCheckTokenResult> {\n  const app = appCheck.app;\n  ensureActivated(app);\n\n  const state = getStateReference(app);\n\n  /**\n   * First check if there is a token in memory from a previous `getToken()` call.\n   */\n  let token: AppCheckTokenInternal | undefined = state.token;\n  let error: Error | undefined = undefined;\n\n  /**\n   * If an invalid token was found in memory, clear token from\n   * memory and unset the local variable `token`.\n   */\n  if (token && !isValid(token)) {\n    state.token = undefined;\n    token = undefined;\n  }\n\n  /**\n   * If there is no valid token in memory, try to load token from indexedDB.\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken) {\n      if (isValid(cachedToken)) {\n        token = cachedToken;\n      } else {\n        // If there was an invalid token in the indexedDB cache, clear it.\n        await writeTokenToStorage(app, undefined);\n      }\n    }\n  }\n\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n\n  // Only set to true if this `getToken()` call is making the actual\n  // REST call to the exchange endpoint, versus waiting for an already\n  // in-flight call (see debug and regular exchange endpoint paths below)\n  let shouldCallListeners = false;\n\n  /**\n   * DEBUG MODE\n   * If debug mode is set, and there is no cached token, fetch a new App\n   * Check token using the debug token, and return it directly.\n   */\n  if (isDebugMode()) {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      state.exchangeTokenPromise = exchangeToken(\n        getExchangeDebugTokenRequest(app, await getDebugToken()),\n        appCheck.heartbeatServiceProvider\n      ).finally(() => {\n        // Clear promise when settled - either resolved or rejected.\n        state.exchangeTokenPromise = undefined;\n      });\n      shouldCallListeners = true;\n    }\n    const tokenFromDebugExchange: AppCheckTokenInternal =\n      await state.exchangeTokenPromise;\n    // Write debug token to indexedDB.\n    await writeTokenToStorage(app, tokenFromDebugExchange);\n    // Write debug token to state.\n    state.token = tokenFromDebugExchange;\n    return { token: tokenFromDebugExchange.token };\n  }\n\n  /**\n   * There are no valid tokens in memory or indexedDB and we are not in\n   * debug mode.\n   * Request a new token from the exchange endpoint.\n   */\n  try {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      // state.provider is populated in initializeAppCheck()\n      // ensureActivated() at the top of this function checks that\n      // initializeAppCheck() has been called.\n      state.exchangeTokenPromise = state.provider!.getToken().finally(() => {\n        // Clear promise when settled - either resolved or rejected.\n        state.exchangeTokenPromise = undefined;\n      });\n      shouldCallListeners = true;\n    }\n    token = await getStateReference(app).exchangeTokenPromise;\n  } catch (e) {\n    if ((e as FirebaseError).code === `appCheck/${AppCheckError.THROTTLED}`) {\n      // Warn if throttled, but do not treat it as an error.\n      logger.warn((e as FirebaseError).message);\n    } else {\n      // `getToken()` should never throw, but logging error text to console will aid debugging.\n      logger.error(e);\n    }\n    // Always save error to be added to dummy token.\n    error = e as FirebaseError;\n  }\n\n  let interopTokenResult: AppCheckTokenResult | undefined;\n  if (!token) {\n    // If token is undefined, there must be an error.\n    // Return a dummy token along with the error.\n    interopTokenResult = makeDummyTokenResult(error!);\n  } else if (error) {\n    if (isValid(token)) {\n      // It's also possible a valid token exists, but there's also an error.\n      // (Such as if the token is almost expired, tries to refresh, and\n      // the exchange request fails.)\n      // We add a special error property here so that the refresher will\n      // count this as a failed attempt and use the backoff instead of\n      // retrying repeatedly with no delay, but any 3P listeners will not\n      // be hindered in getting the still-valid token.\n      interopTokenResult = {\n        token: token.token,\n        internalError: error\n      };\n    } else {\n      // No invalid tokens should make it to this step. Memory and cached tokens\n      // are checked. Other tokens are from fresh exchanges. But just in case.\n      interopTokenResult = makeDummyTokenResult(error!);\n    }\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    state.token = token;\n    await writeTokenToStorage(app, token);\n  }\n\n  if (shouldCallListeners) {\n    notifyTokenListeners(app, interopTokenResult);\n  }\n  return interopTokenResult;\n}\n\n/**\n * Internal API for limited use tokens. Skips all FAC state and simply calls\n * the underlying provider.\n */\nexport async function getLimitedUseToken(\n  appCheck: AppCheckService\n): Promise<AppCheckTokenResult> {\n  const app = appCheck.app;\n  ensureActivated(app);\n\n  const { provider } = getStateReference(app);\n\n  if (isDebugMode()) {\n    const debugToken = await getDebugToken();\n    const { token } = await exchangeToken(\n      getExchangeDebugTokenRequest(app, debugToken),\n      appCheck.heartbeatServiceProvider\n    );\n    return { token };\n  } else {\n    // provider is definitely valid since we ensure AppCheck was activated\n    const { token } = await provider!.getToken();\n    return { token };\n  }\n}\n\nexport function addTokenListener(\n  appCheck: AppCheckService,\n  type: ListenerType,\n  listener: AppCheckTokenListener,\n  onError?: (error: Error) => void\n): void {\n  const { app } = appCheck;\n  const state = getStateReference(app);\n  const tokenObserver: AppCheckTokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  state.tokenObservers = [...state.tokenObservers, tokenObserver];\n\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve()\n      .then(() => {\n        listener({ token: validToken.token });\n        initTokenRefresher(appCheck);\n      })\n      .catch(() => {\n        /* we don't care about exceptions thrown in listeners */\n      });\n  }\n\n  /**\n   * Wait for any cached token promise to resolve before starting the token\n   * refresher. The refresher checks to see if there is an existing token\n   * in state and calls the exchange endpoint if not. We should first let the\n   * IndexedDB check have a chance to populate state if it can.\n   *\n   * Listener call isn't needed here because cachedTokenPromise will call any\n   * listeners that exist when it resolves.\n   */\n\n  // state.cachedTokenPromise is always populated in `activate()`.\n  void state.cachedTokenPromise!.then(() => initTokenRefresher(appCheck));\n}\n\nexport function removeTokenListener(\n  app: FirebaseApp,\n  listener: AppCheckTokenListener\n): void {\n  const state = getStateReference(app);\n\n  const newObservers = state.tokenObservers.filter(\n    tokenObserver => tokenObserver.next !== listener\n  );\n  if (\n    newObservers.length === 0 &&\n    state.tokenRefresher &&\n    state.tokenRefresher.isRunning()\n  ) {\n    state.tokenRefresher.stop();\n  }\n\n  state.tokenObservers = newObservers;\n}\n\n/**\n * Logic to create and start refresher as needed.\n */\nfunction initTokenRefresher(appCheck: AppCheckService): void {\n  const { app } = appCheck;\n  const state = getStateReference(app);\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  let refresher: Refresher | undefined = state.tokenRefresher;\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    state.tokenRefresher = refresher;\n  }\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\n\nfunction createTokenRefresher(appCheck: AppCheckService): Refresher {\n  const { app } = appCheck;\n  return new Refresher(\n    // Keep in mind when this fails for any reason other than the ones\n    // for which we should retry, it will effectively stop the proactive refresh.\n    async () => {\n      const state = getStateReference(app);\n      // If there is no token, we will try to load it from storage and use it\n      // If there is a token, we force refresh it because we know it's going to expire soon\n      let result;\n      if (!state.token) {\n        result = await getToken(appCheck);\n      } else {\n        result = await getToken(appCheck, true);\n      }\n\n      /**\n       * getToken() always resolves. In case the result has an error field defined, it means\n       * the operation failed, and we should retry.\n       */\n      if (result.error) {\n        throw result.error;\n      }\n      /**\n       * A special `internalError` field reflects that there was an error\n       * getting a new token from the exchange endpoint, but there's still a\n       * previous token that's valid for now and this should be passed to 2P/3P\n       * requests for a token. But we want this callback (`this.operation` in\n       * `Refresher`) to throw in order to kick off the Refresher's retry\n       * backoff. (Setting `hasSucceeded` to false.)\n       */\n      if (result.internalError) {\n        throw result.internalError;\n      }\n    },\n    () => {\n      return true;\n    },\n    () => {\n      const state = getStateReference(app);\n\n      if (state.token) {\n        // issuedAtTime + (50% * total TTL) + 5 minutes\n        let nextRefreshTimeMillis =\n          state.token.issuedAtTimeMillis +\n          (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\n            0.5 +\n          5 * 60 * 1000;\n        // Do not allow refresh time to be past (expireTime - 5 minutes)\n        const latestAllowableRefresh =\n          state.token.expireTimeMillis - 5 * 60 * 1000;\n        nextRefreshTimeMillis = Math.min(\n          nextRefreshTimeMillis,\n          latestAllowableRefresh\n        );\n        return Math.max(0, nextRefreshTimeMillis - Date.now());\n      } else {\n        return 0;\n      }\n    },\n    TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT,\n    TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT\n  );\n}\n\nexport function notifyTokenListeners(\n  app: FirebaseApp,\n  token: AppCheckTokenResult\n): void {\n  const observers = getStateReference(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === ListenerType.EXTERNAL && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error!(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nexport function isValid(token: AppCheckTokenInternal): boolean {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error: Error): AppCheckTokenResult {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppCheck } from './public-types';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { FirebaseAppCheckInternal, ListenerType } from './types';\nimport {\n  getToken,\n  getLimitedUseToken,\n  addTokenListener,\n  removeTokenListener\n} from './internal-api';\nimport { Provider } from '@firebase/component';\nimport { getStateReference } from './state';\n\n/**\n * AppCheck Service class.\n */\nexport class AppCheckService implements AppCheck, _FirebaseService {\n  constructor(\n    public app: FirebaseApp,\n    public heartbeatServiceProvider: Provider<'heartbeat'>\n  ) {}\n  _delete(): Promise<void> {\n    const { tokenObservers } = getStateReference(this.app);\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n    return Promise.resolve();\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  heartbeatServiceProvider: Provider<'heartbeat'>\n): AppCheckService {\n  return new AppCheckService(app, heartbeatServiceProvider);\n}\n\nexport function internalFactory(\n  appCheck: AppCheckService\n): FirebaseAppCheckInternal {\n  return {\n    getToken: forceRefresh => getToken(appCheck, forceRefresh),\n    getLimitedUseToken: () => getLimitedUseToken(appCheck),\n    addTokenListener: listener =>\n      addTokenListener(appCheck, ListenerType.INTERNAL, listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { getStateReference } from './state';\nimport { Deferred } from '@firebase/util';\nimport { getRecaptcha, ensureActivated } from './util';\n\nexport const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nexport const RECAPTCHA_ENTERPRISE_URL =\n  'https://www.google.com/recaptcha/enterprise.js';\n\nexport function initializeV3(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  const state = getStateReference(app);\n  state.reCAPTCHAState = { initialized };\n\n  const divId = makeDiv(app);\n\n  const grecaptcha = getRecaptcha(false);\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(() => {\n      const grecaptcha = getRecaptcha(false);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\nexport function initializeEnterprise(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  const state = getStateReference(app);\n  state.reCAPTCHAState = { initialized };\n\n  const divId = makeDiv(app);\n\n  const grecaptcha = getRecaptcha(true);\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(() => {\n      const grecaptcha = getRecaptcha(true);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\n\n/**\n * Add listener to render the widget and resolve the promise when\n * the grecaptcha.ready() event fires.\n */\nfunction queueWidgetRender(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string,\n  initialized: Deferred<GreCAPTCHA>\n): void {\n  grecaptcha.ready(() => {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n\n/**\n * Add invisible div to page.\n */\nfunction makeDiv(app: FirebaseApp): string {\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  ensureActivated(app);\n\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getStateReference(app).reCAPTCHAState!;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getStateReference(app).reCAPTCHAState!;\n    recaptcha.ready(() => {\n      resolve(\n        // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n        recaptcha.execute(reCAPTCHAState.widgetId!, {\n          action: 'fire_app_check'\n        })\n      );\n    });\n  });\n}\n\n/**\n *\n * @param app\n * @param container - Id of a HTML element.\n */\nfunction renderInvisibleWidget(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string\n): void {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible',\n    // Success callback - set state\n    callback: () => {\n      getStateReference(app).reCAPTCHAState!.succeeded = true;\n    },\n    // Failure callback - set state\n    'error-callback': () => {\n      getStateReference(app).reCAPTCHAState!.succeeded = false;\n    }\n  });\n\n  const state = getStateReference(app);\n\n  state.reCAPTCHAState = {\n    ...state.reCAPTCHAState!, // state.reCAPTCHAState is set in the initialize()\n    widgetId\n  };\n}\n\nfunction loadReCAPTCHAV3Script(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\nfunction loadReCAPTCHAEnterpriseScript(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\ndeclare global {\n  interface Window {\n    grecaptcha: GreCAPTCHATopLevel | undefined;\n  }\n}\n\nexport interface GreCAPTCHATopLevel extends GreCAPTCHA {\n  enterprise: GreCAPTCHA;\n}\n\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n  callback: () => void;\n  'error-callback': () => void;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _getProvider } from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport {\n  FirebaseError,\n  issuedAtTime,\n  calculateBackoffMillis\n} from '@firebase/util';\nimport {\n  exchangeToken,\n  getExchangeRecaptchaEnterpriseTokenRequest,\n  getExchangeRecaptchaV3TokenRequest\n} from './client';\nimport { ONE_DAY } from './constants';\nimport { AppCheckError, ERROR_FACTORY } from './errors';\nimport { CustomProviderOptions } from './public-types';\nimport {\n  getToken as getReCAPTCHAToken,\n  initializeV3 as initializeRecaptchaV3,\n  initializeEnterprise as initializeRecaptchaEnterprise\n} from './recaptcha';\nimport { getStateReference } from './state';\nimport { AppCheckProvider, AppCheckTokenInternal, ThrottleData } from './types';\nimport { getDurationString } from './util';\n\n/**\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaV3Provider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _heartbeatServiceProvider?: Provider<'heartbeat'>;\n  /**\n   * Throttle requests on certain error codes to prevent too many retries\n   * in a short time.\n   */\n  private _throttleData: ThrottleData | null = null;\n  /**\n   * Create a ReCaptchaV3Provider instance.\n   * @param siteKey - ReCAPTCHA V3 siteKey.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    throwIfThrottled(this._throttleData);\n\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app!).catch(\n      _e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      }\n    );\n    // Check if a failure state was set by the recaptcha \"error-callback\".\n    if (!getStateReference(this._app!).reCAPTCHAState?.succeeded) {\n      throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n    }\n    let result;\n    try {\n      result = await exchangeToken(\n        getExchangeRecaptchaV3TokenRequest(this._app!, attestedClaimsToken),\n        this._heartbeatServiceProvider!\n      );\n    } catch (e) {\n      if (\n        (e as FirebaseError).code?.includes(AppCheckError.FETCH_STATUS_ERROR)\n      ) {\n        this._throttleData = setBackoff(\n          Number((e as FirebaseError).customData?.httpStatus),\n          this._throttleData\n        );\n        throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n          time: getDurationString(\n            this._throttleData.allowRequestsAfter - Date.now()\n          ),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeRecaptchaV3(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaEnterpriseProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _heartbeatServiceProvider?: Provider<'heartbeat'>;\n  /**\n   * Throttle requests on certain error codes to prevent too many retries\n   * in a short time.\n   */\n  private _throttleData: ThrottleData | null = null;\n  /**\n   * Create a ReCaptchaEnterpriseProvider instance.\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    throwIfThrottled(this._throttleData);\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app!).catch(\n      _e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      }\n    );\n    // Check if a failure state was set by the recaptcha \"error-callback\".\n    if (!getStateReference(this._app!).reCAPTCHAState?.succeeded) {\n      throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n    }\n    let result;\n    try {\n      result = await exchangeToken(\n        getExchangeRecaptchaEnterpriseTokenRequest(\n          this._app!,\n          attestedClaimsToken\n        ),\n        this._heartbeatServiceProvider!\n      );\n    } catch (e) {\n      if (\n        (e as FirebaseError).code?.includes(AppCheckError.FETCH_STATUS_ERROR)\n      ) {\n        this._throttleData = setBackoff(\n          Number((e as FirebaseError).customData?.httpStatus),\n          this._throttleData\n        );\n        throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n          time: getDurationString(\n            this._throttleData.allowRequestsAfter - Date.now()\n          ),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeRecaptchaEnterprise(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Custom provider class.\n * @public\n */\nexport class CustomProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n\n  constructor(private _customProviderOptions: CustomProviderOptions) {}\n\n  /**\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis =\n      issuedAtTimeSeconds !== null &&\n      issuedAtTimeSeconds < Date.now() &&\n      issuedAtTimeSeconds > 0\n        ? issuedAtTimeSeconds * 1000\n        : Date.now();\n\n    return { ...customToken, issuedAtTimeMillis };\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof CustomProvider) {\n      return (\n        this._customProviderOptions.getToken.toString() ===\n        otherProvider._customProviderOptions.getToken.toString()\n      );\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Set throttle data to block requests until after a certain time\n * depending on the failed request's status code.\n * @param httpStatus - Status code of failed request.\n * @param throttleData - `ThrottleData` object containing previous throttle\n * data state.\n * @returns Data about current throttle state and expiration time.\n */\nfunction setBackoff(\n  httpStatus: number,\n  throttleData: ThrottleData | null\n): ThrottleData {\n  /**\n   * Block retries for 1 day for the following error codes:\n   *\n   * 404: Likely malformed URL.\n   *\n   * 403:\n   * - Attestation failed\n   * - Wrong API key\n   * - Project deleted\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus\n    };\n  } else {\n    /**\n     * For all other error codes, the time when it is ok to retry again\n     * is based on exponential backoff.\n     */\n    const backoffCount = throttleData ? throttleData.backoffCount : 0;\n    const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus\n    };\n  }\n}\n\nfunction throwIfThrottled(throttleData: ThrottleData | null): void {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheck,\n  AppCheckOptions,\n  AppCheckTokenResult,\n  Unsubscribe,\n  PartialObserver\n} from './public-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport {\n  getStateReference,\n  getDebugState,\n  DEFAULT_STATE,\n  setInitialState\n} from './state';\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { getModularInstance, ErrorFn, NextFn } from '@firebase/util';\nimport { AppCheckService } from './factory';\nimport { AppCheckProvider, ListenerType } from './types';\nimport {\n  getToken as getTokenInternal,\n  getLimitedUseToken as getLimitedUseTokenInternal,\n  addTokenListener,\n  removeTokenListener,\n  isValid,\n  notifyTokenListeners\n} from './internal-api';\nimport { readTokenFromStorage } from './storage';\nimport { getDebugToken, initializeDebugMode, isDebugMode } from './debug';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'app-check': AppCheckService;\n  }\n}\n\nexport {\n  ReCaptchaV3Provider,\n  CustomProvider,\n  ReCaptchaEnterpriseProvider\n} from './providers';\n\n/**\n * Activate App Check for the given app. Can be called only once per app.\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\n * @param options - App Check initialization options\n * @public\n */\nexport function initializeAppCheck(\n  app: FirebaseApp = getApp(),\n  options: AppCheckOptions\n): AppCheck {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'app-check');\n\n  // Ensure initializeDebugMode() is only called once.\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  }\n\n  // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(token =>\n      // Not using logger because I don't think we ever want this accidentally hidden.\n      console.log(\n        `App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`\n      )\n    );\n  }\n\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions() as unknown as AppCheckOptions;\n    if (\n      initialOptions.isTokenAutoRefreshEnabled ===\n        options.isTokenAutoRefreshEnabled &&\n      initialOptions.provider.isEqual(options.provider)\n    ) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AppCheckError.ALREADY_INITIALIZED, {\n        appName: app.name\n      });\n    }\n  }\n\n  const appCheck = provider.initialize({ options });\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\n  // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n  if (getStateReference(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    addTokenListener(appCheck, ListenerType.INTERNAL, () => {});\n  }\n\n  return appCheck;\n}\n\n/**\n * Activate App Check\n * @param app - Firebase app to activate App Check for.\n * @param provider - reCAPTCHA v3 provider or\n * custom token provider.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. If undefined, defaults to the\n * value of `app.automaticDataCollectionEnabled`, which defaults to\n * false and can be set in the app config.\n */\nfunction _activate(\n  app: FirebaseApp,\n  provider: AppCheckProvider,\n  isTokenAutoRefreshEnabled?: boolean\n): void {\n  // Create an entry in the APP_CHECK_STATES map. Further changes should\n  // directly mutate this object.\n  const state = setInitialState(app, { ...DEFAULT_STATE });\n\n  state.activated = true;\n  state.provider = provider; // Read cached token from storage if it exists and store it in memory.\n  state.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      state.token = cachedToken;\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, { token: cachedToken.token });\n    }\n    return cachedToken;\n  });\n\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  state.isTokenAutoRefreshEnabled =\n    isTokenAutoRefreshEnabled === undefined\n      ? app.automaticDataCollectionEnabled\n      : isTokenAutoRefreshEnabled;\n\n  state.provider.initialize(app);\n}\n\n/**\n * Set whether App Check will automatically refresh tokens as needed.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. This overrides any value set\n * during `initializeAppCheck()`.\n * @public\n */\nexport function setTokenAutoRefreshEnabled(\n  appCheckInstance: AppCheck,\n  isTokenAutoRefreshEnabled: boolean\n): void {\n  const app = appCheckInstance.app;\n  const state = getStateReference(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  state.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled;\n}\n/**\n * Get the current App Check token. Attaches to the most recent\n * in-flight request if one is present. Returns null if no token\n * is present and no token requests are in-flight.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param forceRefresh - If true, will always try to fetch a fresh token.\n * If false, will use a cached token if found in storage.\n * @public\n */\nexport async function getToken(\n  appCheckInstance: AppCheck,\n  forceRefresh?: boolean\n): Promise<AppCheckTokenResult> {\n  const result = await getTokenInternal(\n    appCheckInstance as AppCheckService,\n    forceRefresh\n  );\n  if (result.error) {\n    throw result.error;\n  }\n  return { token: result.token };\n}\n\n/**\n * Requests a Firebase App Check token. This method should be used\n * only if you need to authorize requests to a non-Firebase backend.\n *\n * Returns limited-use tokens that are intended for use with your\n * non-Firebase backend endpoints that are protected with\n * <a href=\"https://firebase.google.com/docs/app-check/custom-resource-backend#replay-protection\">\n * Replay Protection</a>. This method\n * does not affect the token generation behavior of the\n * #getAppCheckToken() method.\n *\n * @param appCheckInstance - The App Check service instance.\n * @returns The limited use token.\n * @public\n */\nexport function getLimitedUseToken(\n  appCheckInstance: AppCheck\n): Promise<AppCheckTokenResult> {\n  return getLimitedUseTokenInternal(appCheckInstance as AppCheckService);\n}\n\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param observer - An object with `next`, `error`, and `complete`\n * properties. `next` is called with an\n * {@link AppCheckTokenResult}\n * whenever the token changes. `error` is optional and is called if an\n * error is thrown by the listener (the `next` function). `complete`\n * is unused, as the token stream is unending.\n *\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  observer: PartialObserver<AppCheckTokenResult>\n): Unsubscribe;\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param onNext - When the token changes, this function is called with aa\n * {@link AppCheckTokenResult}.\n * @param onError - Optional. Called if there is an error thrown by the\n * listener (the `onNext` function).\n * @param onCompletion - Currently unused, as the token stream is unending.\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNext: (tokenResult: AppCheckTokenResult) => void,\n  onError?: (error: Error) => void,\n  onCompletion?: () => void\n): Unsubscribe;\n/**\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\n * pattern for public use.\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNextOrObserver:\n    | ((tokenResult: AppCheckTokenResult) => void)\n    | PartialObserver<AppCheckTokenResult>,\n  onError?: (error: Error) => void,\n  /**\n   * NOTE: Although an `onCompletion` callback can be provided, it will\n   * never be called because the token stream is never-ending.\n   * It is added only for API consistency with the observer pattern, which\n   * we follow in JS APIs.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onCompletion?: () => void\n): Unsubscribe {\n  let nextFn: NextFn<AppCheckTokenResult> = () => {};\n  let errorFn: ErrorFn = () => {};\n  if ((onNextOrObserver as PartialObserver<AppCheckTokenResult>).next != null) {\n    nextFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).next!.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver as NextFn<AppCheckTokenResult>;\n  }\n  if (\n    (onNextOrObserver as PartialObserver<AppCheckTokenResult>).error != null\n  ) {\n    errorFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).error!.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(\n    appCheckInstance as AppCheckService,\n    ListenerType.EXTERNAL,\n    nextFn,\n    errorFn\n  );\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n","/**\n * Firebase App Check\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport { _AppCheckComponentName } from './public-types';\nimport { factory, internalFactory } from './factory';\nimport { _AppCheckInternalComponentName } from './types';\nimport { name, version } from '../package.json';\n\n// Used by other Firebase packages.\nexport { _AppCheckInternalComponentName };\n\nexport * from './api';\nexport * from './public-types';\n\nconst APP_CHECK_NAME: _AppCheckComponentName = 'app-check';\nconst APP_CHECK_NAME_INTERNAL: _AppCheckInternalComponentName =\n  'app-check-internal';\nfunction registerAppCheck(): void {\n  // The public interface\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const heartbeatServiceProvider = container.getProvider('heartbeat');\n        return factory(app, heartbeatServiceProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Initialize app-check-internal after app-check is initialized to make AppCheck available to\n       * other Firebase SDKs\n       */\n      .setInstanceCreatedCallback(\n        (container, _identifier, _appcheckService) => {\n          container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n        }\n      )\n  );\n\n  // The internal interface used by other Firebase products\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME_INTERNAL,\n      container => {\n        const appCheck = container.getProvider('app-check').getImmediate();\n        return internalFactory(appCheck);\n      },\n      ComponentType.PUBLIC\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\n"]},"metadata":{},"sourceType":"module"}