{"ast":null,"code":"import { ErrorFactory, areCookiesEnabled, isIndexedDBAvailable, validateIndexedDBOpenable, getModularInstance, deepEqual } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\nconst name = \"@firebase/performance\";\nconst version = \"0.6.4\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\n\nconst TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\n\nconst TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\n\nconst TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\n\nconst OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\nconst FIRST_PAINT_COUNTER_NAME = '_fp';\nconst FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\nconst FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\nconst CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\nconst CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';\nconst SERVICE = 'performance';\nconst SERVICE_NAME = 'Performance';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst ERROR_DESCRIPTION_MAP = {\n  [\"trace started\"\n  /* ErrorCode.TRACE_STARTED_BEFORE */\n  ]: 'Trace {$traceName} was started before.',\n  [\"trace stopped\"\n  /* ErrorCode.TRACE_STOPPED_BEFORE */\n  ]: 'Trace {$traceName} is not running.',\n  [\"nonpositive trace startTime\"\n  /* ErrorCode.NONPOSITIVE_TRACE_START_TIME */\n  ]: 'Trace {$traceName} startTime should be positive.',\n  [\"nonpositive trace duration\"\n  /* ErrorCode.NONPOSITIVE_TRACE_DURATION */\n  ]: 'Trace {$traceName} duration should be positive.',\n  [\"no window\"\n  /* ErrorCode.NO_WINDOW */\n  ]: 'Window is not available.',\n  [\"no app id\"\n  /* ErrorCode.NO_APP_ID */\n  ]: 'App id is not available.',\n  [\"no project id\"\n  /* ErrorCode.NO_PROJECT_ID */\n  ]: 'Project id is not available.',\n  [\"no api key\"\n  /* ErrorCode.NO_API_KEY */\n  ]: 'Api key is not available.',\n  [\"invalid cc log\"\n  /* ErrorCode.INVALID_CC_LOG */\n  ]: 'Attempted to queue invalid cc event',\n  [\"FB not default\"\n  /* ErrorCode.FB_NOT_DEFAULT */\n  ]: 'Performance can only start when Firebase app instance is the default one.',\n  [\"RC response not ok\"\n  /* ErrorCode.RC_NOT_OK */\n  ]: 'RC response is not ok',\n  [\"invalid attribute name\"\n  /* ErrorCode.INVALID_ATTRIBUTE_NAME */\n  ]: 'Attribute name {$attributeName} is invalid.',\n  [\"invalid attribute value\"\n  /* ErrorCode.INVALID_ATTRIBUTE_VALUE */\n  ]: 'Attribute value {$attributeValue} is invalid.',\n  [\"invalid custom metric name\"\n  /* ErrorCode.INVALID_CUSTOM_METRIC_NAME */\n  ]: 'Custom metric name {$customMetricName} is invalid',\n  [\"invalid String merger input\"\n  /* ErrorCode.INVALID_STRING_MERGER_PARAMETER */\n  ]: 'Input for String merger is invalid, contact support team to resolve.',\n  [\"already initialized\"\n  /* ErrorCode.ALREADY_INITIALIZED */\n  ]: 'initializePerformance() has already been called with ' + 'different options. To avoid this error, call initializePerformance() with the ' + 'same options as when it was originally called, or call getPerformance() to return the' + ' already initialized instance.'\n};\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nlet apiInstance;\nlet windowInstance;\n/**\r\n * This class holds a reference to various browser related objects injected by\r\n * set methods.\r\n */\n\nclass Api {\n  constructor(window) {\n    this.window = window;\n\n    if (!window) {\n      throw ERROR_FACTORY.create(\"no window\"\n      /* ErrorCode.NO_WINDOW */\n      );\n    }\n\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  getUrl() {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name) {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n\n    this.performance.mark(name);\n  }\n\n  measure(measureName, mark1, mark2) {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type) {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name) {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin() {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return this.performance && (this.performance.timeOrigin || this.performance.timing.navigationStart);\n  }\n\n  requiredApisAvailable() {\n    if (!fetch || !Promise || !areCookiesEnabled()) {\n      consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');\n      return false;\n    }\n\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n\n    return true;\n  }\n\n  setupObserver(entryType, callback) {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    }); // Start observing the entry types you care about.\n\n    observer.observe({\n      entryTypes: [entryType]\n    });\n  }\n\n  static getInstance() {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n\n    return apiInstance;\n  }\n\n}\n\nfunction setupApi(window) {\n  windowInstance = window;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet iid;\n\nfunction getIidPromise(installationsService) {\n  const iidPromise = installationsService.getId(); // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n  iidPromise.then(iidVal => {\n    iid = iidVal;\n  });\n  return iidPromise;\n} // This method should be used after the iid is retrieved by getIidPromise method.\n\n\nfunction getIid() {\n  return iid;\n}\n\nfunction getAuthTokenPromise(installationsService) {\n  const authTokenPromise = installationsService.getToken(); // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n  authTokenPromise.then(authTokenVal => {});\n  return authTokenPromise;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction mergeStrings(part1, part2) {\n  const sizeDiff = part1.length - part2.length;\n\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(\"invalid String merger input\"\n    /* ErrorCode.INVALID_STRING_MERGER_PARAMETER */\n    );\n  }\n\n  const resultArray = [];\n\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet settingsServiceInstance;\n\nclass SettingsService {\n  constructor() {\n    // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n    this.instrumentationEnabled = true; // The variable which controls logging of custom traces.\n\n    this.dataCollectionEnabled = true; // Configuration flags set through remote config.\n\n    this.loggingEnabled = false; // Sampling rate between 0 and 1.\n\n    this.tracesSamplingRate = 1;\n    this.networkRequestsSamplingRate = 1; // Address of logging service.\n\n    this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto'; // Performance event transport endpoint URL which should be compatible with proto3.\n    // New Address for transport service, not configurable via Remote Config.\n\n    this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');\n    this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV'); // Source type for performance event logs.\n\n    this.logSource = 462; // Flags which control per session logging of traces and network requests.\n\n    this.logTraceAfterSampling = false;\n    this.logNetworkAfterSampling = false; // TTL of config retrieved from remote config in hours.\n\n    this.configTimeToLive = 12;\n  }\n\n  getFlTransportFullUrl() {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n\n  static getInstance() {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n\n    return settingsServiceInstance;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar VisibilityState;\n\n(function (VisibilityState) {\n  VisibilityState[VisibilityState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  VisibilityState[VisibilityState[\"VISIBLE\"] = 1] = \"VISIBLE\";\n  VisibilityState[VisibilityState[\"HIDDEN\"] = 2] = \"HIDDEN\";\n})(VisibilityState || (VisibilityState = {}));\n\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nfunction getServiceWorkerStatus() {\n  const navigator = Api.getInstance().navigator;\n\n  if (navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) {\n    if (navigator.serviceWorker.controller) {\n      return 2\n      /* ServiceWorkerStatus.CONTROLLED */\n      ;\n    } else {\n      return 3\n      /* ServiceWorkerStatus.UNCONTROLLED */\n      ;\n    }\n  } else {\n    return 1\n    /* ServiceWorkerStatus.UNSUPPORTED */\n    ;\n  }\n}\n\nfunction getVisibilityState() {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nfunction getEffectiveConnectionType() {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = navigator.connection;\n  const effectiveType = navigatorConnection && navigatorConnection.effectiveType;\n\n  switch (effectiveType) {\n    case 'slow-2g':\n      return 1\n      /* EffectiveConnectionType.CONNECTION_SLOW_2G */\n      ;\n\n    case '2g':\n      return 2\n      /* EffectiveConnectionType.CONNECTION_2G */\n      ;\n\n    case '3g':\n      return 3\n      /* EffectiveConnectionType.CONNECTION_3G */\n      ;\n\n    case '4g':\n      return 4\n      /* EffectiveConnectionType.CONNECTION_4G */\n      ;\n\n    default:\n      return 0\n      /* EffectiveConnectionType.UNKNOWN */\n      ;\n  }\n}\n\nfunction isValidCustomAttributeName(name) {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix => name.startsWith(prefix));\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nfunction isValidCustomAttributeValue(value) {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getAppId(firebaseApp) {\n  var _a;\n\n  const appId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.appId;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no app id\"\n    /* ErrorCode.NO_APP_ID */\n    );\n  }\n\n  return appId;\n}\n\nfunction getProjectId(firebaseApp) {\n  var _a;\n\n  const projectId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.projectId;\n\n  if (!projectId) {\n    throw ERROR_FACTORY.create(\"no project id\"\n    /* ErrorCode.NO_PROJECT_ID */\n    );\n  }\n\n  return projectId;\n}\n\nfunction getApiKey(firebaseApp) {\n  var _a;\n\n  const apiKey = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.apiKey;\n\n  if (!apiKey) {\n    throw ERROR_FACTORY.create(\"no api key\"\n    /* ErrorCode.NO_API_KEY */\n    );\n  }\n\n  return apiKey;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1'; // These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\n\nconst DEFAULT_CONFIGS = {\n  loggingEnabled: true\n};\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nfunction getConfig(performanceController, iid) {\n  const config = getStoredConfig();\n\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(performanceController, iid).then(processConfig).then(config => storeConfig(config),\n  /** Do nothing for error, use defaults set in settings service. */\n  () => {});\n}\n\nfunction getStoredConfig() {\n  const localStorage = Api.getInstance().localStorage;\n\n  if (!localStorage) {\n    return;\n  }\n\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n\n  if (!configStringified) {\n    return;\n  }\n\n  try {\n    const configResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch (_a) {\n    return;\n  }\n}\n\nfunction storeConfig(config) {\n  const localStorage = Api.getInstance().localStorage;\n\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() + SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));\n}\n\nconst COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(performanceController, iid) {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise(performanceController.installations).then(authToken => {\n    const projectId = getProjectId(performanceController.app);\n    const apiKey = getApiKey(performanceController.app);\n    const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${apiKey}`;\n    const request = new Request(configEndPoint, {\n      method: 'POST',\n      headers: {\n        Authorization: `${FIS_AUTH_PREFIX} ${authToken}`\n      },\n\n      /* eslint-disable camelcase */\n      body: JSON.stringify({\n        app_instance_id: iid,\n        app_instance_id_token: authToken,\n        app_id: getAppId(performanceController.app),\n        app_version: SDK_VERSION,\n        sdk_version: REMOTE_CONFIG_SDK_VERSION\n      })\n      /* eslint-enable camelcase */\n\n    });\n    return fetch(request).then(response => {\n      if (response.ok) {\n        return response.json();\n      } // In case response is not ok. This will be caught by catch.\n\n\n      throw ERROR_FACTORY.create(\"RC response not ok\"\n      /* ErrorCode.RC_NOT_OK */\n      );\n    });\n  }).catch(() => {\n    consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n    return undefined;\n  });\n}\n/**\r\n * Processes config coming either from calling RC or from local storage.\r\n * This method only runs if call is successful or config in storage\r\n * is valid.\r\n */\n\n\nfunction processConfig(config) {\n  if (!config) {\n    return config;\n  }\n\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled = String(entries.fpr_enabled) === 'true';\n  } else {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  } // Key from Remote Config has to be non-empty string, otherwsie use local value.\n\n\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = DEFAULT_CONFIGS.tracesSamplingRate;\n  } // Set the per session trace and network logging flags.\n\n\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);\n  return config;\n}\n\nfunction configValid(expiry) {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate) {\n  return Math.random() <= samplingRate;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet initializationStatus = 1\n/* InitializationStatus.notInitialized */\n;\nlet initializationPromise;\n\nfunction getInitializationPromise(performanceController) {\n  initializationStatus = 2\n  /* InitializationStatus.initializationPending */\n  ;\n  initializationPromise = initializationPromise || initializePerf(performanceController);\n  return initializationPromise;\n}\n\nfunction isPerfInitialized() {\n  return initializationStatus === 3\n  /* InitializationStatus.initialized */\n  ;\n}\n\nfunction initializePerf(performanceController) {\n  return getDocumentReadyComplete().then(() => getIidPromise(performanceController.installations)).then(iid => getConfig(performanceController, iid)).then(() => changeInitializationStatus(), () => changeInitializationStatus());\n}\n/**\r\n * Returns a promise which resolves whenever the document readystate is complete or\r\n * immediately if it is called after page load complete.\r\n */\n\n\nfunction getDocumentReadyComplete() {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = () => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus() {\n  initializationStatus = 3\n  /* InitializationStatus.initialized */\n  ;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000; // If end point does not work, the call will be tried for these many times.\n\nconst DEFAULT_REMAINING_TRIES = 3;\nconst MAX_EVENT_COUNT_PER_REQUEST = 1000;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n/* eslint-enable camelcase */\n\nlet queue = [];\nlet isTransportSetup = false;\n\nfunction setupTransportService() {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\nfunction processQueue(timeOffset) {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    } // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n\n\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents() {\n  // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\n  // The staged events will be used for current logRequest attempt, remaining events will be kept\n  // for next attempt.\n  const staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n\n  const log_event = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n  const data = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1,\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n\n  sendEventsToFl(data, staged).catch(() => {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [...staged, ...queue];\n    remainingTries--;\n    consoleLogger.info(`Tries left: ${remainingTries}.`);\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction sendEventsToFl(data, staged) {\n  return postToFlEndpoint(data).then(res => {\n    if (!res.ok) {\n      consoleLogger.info('Call to Firebase backend failed.');\n    }\n\n    return res.json();\n  }).then(res => {\n    // Find the next call wait time from the response.\n    const transportWait = Number(res.nextRequestWaitMillis);\n    let requestOffset = DEFAULT_SEND_INTERVAL_MS;\n\n    if (!isNaN(transportWait)) {\n      requestOffset = Math.max(transportWait, requestOffset);\n    } // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n    // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n\n\n    const logResponseDetails = res.logResponseDetails;\n\n    if (Array.isArray(logResponseDetails) && logResponseDetails.length > 0 && logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {\n      queue = [...staged, ...queue];\n      consoleLogger.info(`Retry transport request later.`);\n    }\n\n    remainingTries = DEFAULT_REMAINING_TRIES; // Schedule the next process.\n\n    processQueue(requestOffset);\n  });\n}\n\nfunction postToFlEndpoint(data) {\n  const flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt) {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(\"invalid cc log\"\n    /* ErrorCode.INVALID_CC_LOG */\n    );\n  } // Add the new event to the queue.\n\n\n  queue = [...queue, evt];\n}\n/** Log handler for cc service to send the performance logs to the server. */\n\n\nfunction transportHandler( // eslint-disable-next-line @typescript-eslint/no-explicit-any\nserializer) {\n  return function () {\n    const message = serializer(...arguments);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/* eslint-enble camelcase */\n\n\nlet logger; // This method is not called before initialization.\n\nfunction sendLog(resource, resourceType) {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n\n  logger(resource, resourceType);\n}\n\nfunction logTrace(trace) {\n  const settingsService = SettingsService.getInstance(); // Do not log if trace is auto generated and instrumentation is disabled.\n\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  } // Do not log if trace is custom and data collection is disabled.\n\n\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  } // Do not log if required apis are not available.\n\n\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  } // Only log the page load auto traces if page is visible.\n\n\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise(trace.performanceController).then(() => sendTraceLog(trace), () => sendTraceLog(trace));\n  }\n}\n\nfunction sendTraceLog(trace) {\n  if (!getIid()) {\n    return;\n  }\n\n  const settingsService = SettingsService.getInstance();\n\n  if (!settingsService.loggingEnabled || !settingsService.logTraceAfterSampling) {\n    return;\n  }\n\n  setTimeout(() => sendLog(trace, 1\n  /* ResourceType.Trace */\n  ), 0);\n}\n\nfunction logNetworkRequest(networkRequest) {\n  const settingsService = SettingsService.getInstance(); // Do not log network requests if instrumentation is disabled.\n\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  } // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n\n\n  const networkRequestUrl = networkRequest.url; // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n\n  if (networkRequestUrl === logEndpointUrl || networkRequestUrl === flEndpointUrl) {\n    return;\n  }\n\n  if (!settingsService.loggingEnabled || !settingsService.logNetworkAfterSampling) {\n    return;\n  }\n\n  setTimeout(() => sendLog(networkRequest, 0\n  /* ResourceType.NetworkRequest */\n  ), 0);\n}\n\nfunction serializer(resource, resourceType) {\n  if (resourceType === 0\n  /* ResourceType.NetworkRequest */\n  ) {\n    return serializeNetworkRequest(resource);\n  }\n\n  return serializeTrace(resource);\n}\n\nfunction serializeNetworkRequest(networkRequest) {\n  const networkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric = {\n    application_info: getApplicationInfo(networkRequest.performanceController.app),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace) {\n  const traceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n\n  const customAttributes = trace.getAttributes();\n\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  const perfMetric = {\n    application_info: getApplicationInfo(trace.performanceController.app),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(firebaseApp) {\n  return {\n    google_app_id: getAppId(firebaseApp),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [FIRST_PAINT_COUNTER_NAME, FIRST_CONTENTFUL_PAINT_COUNTER_NAME, FIRST_INPUT_DELAY_COUNTER_NAME];\n/**\r\n * Returns true if the metric is custom and does not start with reserved prefix, or if\r\n * the metric is one of out of the box page load trace metrics.\r\n */\n\nfunction isValidMetricName(name, traceName) {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n\n  return traceName && traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) && oobMetrics.indexOf(name) > -1 || !name.startsWith(RESERVED_AUTO_PREFIX);\n}\n/**\r\n * Converts the provided value to an integer value to be used in case of a metric.\r\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\r\n *\r\n * @returns Converted integer number to be set for the metric.\r\n */\n\n\nfunction convertMetricValueToInteger(providedValue) {\n  const valueAsInteger = Math.floor(providedValue);\n\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(`Metric value should be an Integer, setting the value as : ${valueAsInteger}.`);\n  }\n\n  return valueAsInteger;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass Trace {\n  /**\r\n   * @param performanceController The performance controller running.\r\n   * @param name The name of the trace.\r\n   * @param isAuto If the trace is auto-instrumented.\r\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\r\n   * is only set when the trace is built for logging when the user directly uses the user timing\r\n   * api (performance.mark and performance.measure).\r\n   */\n  constructor(performanceController, name) {\n    let isAuto = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let traceMeasureName = arguments.length > 3 ? arguments[3] : undefined;\n    this.performanceController = performanceController;\n    this.name = name;\n    this.isAuto = isAuto;\n    this.state = 1\n    /* TraceState.UNINITIALIZED */\n    ;\n    this.customAttributes = {};\n    this.counters = {};\n    this.api = Api.getInstance();\n    this.randomId = Math.floor(Math.random() * 1000000);\n\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure = traceMeasureName || `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n  /**\r\n   * Starts a trace. The measurement of the duration starts at this point.\r\n   */\n\n\n  start() {\n    if (this.state !== 1\n    /* TraceState.UNINITIALIZED */\n    ) {\n      throw ERROR_FACTORY.create(\"trace started\"\n      /* ErrorCode.TRACE_STARTED_BEFORE */\n      , {\n        traceName: this.name\n      });\n    }\n\n    this.api.mark(this.traceStartMark);\n    this.state = 2\n    /* TraceState.RUNNING */\n    ;\n  }\n  /**\r\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\r\n   * is logged.\r\n   */\n\n\n  stop() {\n    if (this.state !== 2\n    /* TraceState.RUNNING */\n    ) {\n      throw ERROR_FACTORY.create(\"trace stopped\"\n      /* ErrorCode.TRACE_STOPPED_BEFORE */\n      , {\n        traceName: this.name\n      });\n    }\n\n    this.state = 3\n    /* TraceState.TERMINATED */\n    ;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n  /**\r\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\r\n   * directly. No need to use start and stop methods.\r\n   * @param startTime Trace start time since epoch in millisec\r\n   * @param duration The duraction of the trace in millisec\r\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\r\n   */\n\n\n  record(startTime, duration, options) {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(\"nonpositive trace startTime\"\n      /* ErrorCode.NONPOSITIVE_TRACE_START_TIME */\n      , {\n        traceName: this.name\n      });\n    }\n\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(\"nonpositive trace duration\"\n      /* ErrorCode.NONPOSITIVE_TRACE_DURATION */\n      , {\n        traceName: this.name\n      });\n    }\n\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n\n    if (options && options.attributes) {\n      this.customAttributes = Object.assign({}, options.attributes);\n    }\n\n    if (options && options.metrics) {\n      for (const metricName of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metricName]))) {\n          this.counters[metricName] = Math.floor(Number(options.metrics[metricName]));\n        }\n      }\n    }\n\n    logTrace(this);\n  }\n  /**\r\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\r\n   * custom metric if one with the given name does not exist. The value will be floored down to an\r\n   * integer.\r\n   * @param counter Name of the custom metric\r\n   * @param numAsInteger Increment by value\r\n   */\n\n\n  incrementMetric(counter) {\n    let numAsInteger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  }\n  /**\r\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\r\n   * given name does not exist. The value will be floored down to an integer.\r\n   * @param counter Name of the custom metric\r\n   * @param numAsInteger Set custom metric to this value\r\n   */\n\n\n  putMetric(counter, numAsInteger) {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger !== null && numAsInteger !== void 0 ? numAsInteger : 0);\n    } else {\n      throw ERROR_FACTORY.create(\"invalid custom metric name\"\n      /* ErrorCode.INVALID_CUSTOM_METRIC_NAME */\n      , {\n        customMetricName: counter\n      });\n    }\n  }\n  /**\r\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\r\n   * not exist will return zero.\r\n   * @param counter\r\n   */\n\n\n  getMetric(counter) {\n    return this.counters[counter] || 0;\n  }\n  /**\r\n   * Sets a custom attribute of a trace to a certain value.\r\n   * @param attr\r\n   * @param value\r\n   */\n\n\n  putAttribute(attr, value) {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    } // Throw appropriate error when the attribute name or value is invalid.\n\n\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(\"invalid attribute name\"\n      /* ErrorCode.INVALID_ATTRIBUTE_NAME */\n      , {\n        attributeName: attr\n      });\n    }\n\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(\"invalid attribute value\"\n      /* ErrorCode.INVALID_ATTRIBUTE_VALUE */\n      , {\n        attributeValue: value\n      });\n    }\n  }\n  /**\r\n   * Retrieves the value a custom attribute of a trace is set to.\r\n   * @param attr\r\n   */\n\n\n  getAttribute(attr) {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr) {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes() {\n    return Object.assign({}, this.customAttributes);\n  }\n\n  setStartTime(startTime) {\n    this.startTimeUs = startTime;\n  }\n\n  setDuration(duration) {\n    this.durationUs = duration;\n  }\n  /**\r\n   * Calculates and assigns the duration and start time of the trace using the measure performance\r\n   * entry.\r\n   */\n\n\n  calculateTraceMetrics() {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);\n    }\n  }\n  /**\r\n   * @param navigationTimings A single element array which contains the navigationTIming object of\r\n   * the page load\r\n   * @param paintTimings A array which contains paintTiming object of the page load\r\n   * @param firstInputDelay First input delay in millisec\r\n   */\n\n\n  static createOobTrace(performanceController, navigationTimings, paintTimings, firstInputDelay) {\n    const route = Api.getInstance().getUrl();\n\n    if (!route) {\n      return;\n    }\n\n    const trace = new Trace(performanceController, OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs); // navigationTimings includes only one element.\n\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));\n      trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));\n      trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(paintObject => paintObject.name === FIRST_PAINT);\n\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));\n      }\n\n      const firstContentfulPaint = paintTimings.find(paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT);\n\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));\n      }\n    }\n\n    logTrace(trace);\n  }\n\n  static createUserTimingTrace(performanceController, measureName) {\n    const trace = new Trace(performanceController, measureName, false, measureName);\n    logTrace(trace);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction createNetworkRequestEntry(performanceController, entry) {\n  const performanceEntry = entry;\n\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);\n  const timeToResponseInitiatedUs = performanceEntry.responseStart ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000) : undefined;\n  const timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000); // Remove the query params from logged network request url.\n\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest = {\n    performanceController,\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n  logNetworkRequest(networkRequest);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst FID_WAIT_TIME_MS = 5000;\n\nfunction setupOobResources(performanceController) {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  } // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n\n\n  setTimeout(() => setupOobTraces(performanceController), 0);\n  setTimeout(() => setupNetworkRequests(performanceController), 0);\n  setTimeout(() => setupUserTimingTraces(performanceController), 0);\n}\n\nfunction setupNetworkRequests(performanceController) {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n\n  for (const resource of resources) {\n    createNetworkRequestEntry(performanceController, resource);\n  }\n\n  api.setupObserver('resource', entry => createNetworkRequestEntry(performanceController, entry));\n}\n\nfunction setupOobTraces(performanceController) {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType('navigation');\n  const paintTimings = api.getEntriesByType('paint'); // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId = setTimeout(() => {\n      Trace.createOobTrace(performanceController, navigationTimings, paintTimings);\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay(fid => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(performanceController, navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(performanceController, navigationTimings, paintTimings);\n  }\n}\n\nfunction setupUserTimingTraces(performanceController) {\n  const api = Api.getInstance(); // Run through the measure performance entries collected up to this point.\n\n  const measures = api.getEntriesByType('measure');\n\n  for (const measure of measures) {\n    createUserTimingTrace(performanceController, measure);\n  } // Setup an observer to capture the measures from this point on.\n\n\n  api.setupObserver('measure', entry => createUserTimingTrace(performanceController, entry));\n}\n\nfunction createUserTimingTrace(performanceController, measure) {\n  const measureName = measure.name; // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n\n  if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) === TRACE_MEASURE_PREFIX) {\n    return;\n  }\n\n  Trace.createUserTimingTrace(performanceController, measureName);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass PerformanceController {\n  constructor(app, installations) {\n    this.app = app;\n    this.installations = installations;\n    this.initialized = false;\n  }\n  /**\r\n   * This method *must* be called internally as part of creating a\r\n   * PerformanceController instance.\r\n   *\r\n   * Currently it's not possible to pass the settings object through the\r\n   * constructor using Components, so this method exists to be called with the\r\n   * desired settings, to ensure nothing is collected without the user's\r\n   * consent.\r\n   */\n\n\n  _init(settings) {\n    if (this.initialized) {\n      return;\n    }\n\n    if ((settings === null || settings === void 0 ? void 0 : settings.dataCollectionEnabled) !== undefined) {\n      this.dataCollectionEnabled = settings.dataCollectionEnabled;\n    }\n\n    if ((settings === null || settings === void 0 ? void 0 : settings.instrumentationEnabled) !== undefined) {\n      this.instrumentationEnabled = settings.instrumentationEnabled;\n    }\n\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable().then(isAvailable => {\n        if (isAvailable) {\n          setupTransportService();\n          getInitializationPromise(this).then(() => setupOobResources(this), () => setupOobResources(this));\n          this.initialized = true;\n        }\n      }).catch(error => {\n        consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\n      });\n    } else {\n      consoleLogger.info('Firebase Performance cannot start if the browser does not support ' + '\"Fetch\" and \"Promise\", or cookies are disabled.');\n    }\n  }\n\n  set instrumentationEnabled(val) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n\n  get instrumentationEnabled() {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n\n  get dataCollectionEnabled() {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n\n}\n/**\r\n * Firebase Performance Monitoring\r\n *\r\n * @packageDocumentation\r\n */\n\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n/**\r\n * Returns a {@link FirebasePerformance} instance for the given app.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @public\r\n */\n\nfunction getPerformance() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  app = getModularInstance(app);\n\n  const provider = _getProvider(app, 'performance');\n\n  const perfInstance = provider.getImmediate();\n  return perfInstance;\n}\n/**\r\n * Returns a {@link FirebasePerformance} instance for the given app. Can only be called once.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @param settings - Optional settings for the {@link FirebasePerformance} instance.\r\n * @public\r\n */\n\n\nfunction initializePerformance(app, settings) {\n  app = getModularInstance(app);\n\n  const provider = _getProvider(app, 'performance'); // throw if an instance was already created.\n  // It could happen if initializePerformance() is called more than once, or getPerformance() is called first.\n\n\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialSettings = provider.getOptions();\n\n    if (deepEqual(initialSettings, settings !== null && settings !== void 0 ? settings : {})) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already initialized\"\n      /* ErrorCode.ALREADY_INITIALIZED */\n      );\n    }\n  }\n\n  const perfInstance = provider.initialize({\n    options: settings\n  });\n  return perfInstance;\n}\n/**\r\n * Returns a new `PerformanceTrace` instance.\r\n * @param performance - The {@link FirebasePerformance} instance to use.\r\n * @param name - The name of the trace.\r\n * @public\r\n */\n\n\nfunction trace(performance, name) {\n  performance = getModularInstance(performance);\n  return new Trace(performance, name);\n}\n\nconst factory = (container, _ref) => {\n  let {\n    options: settings\n  } = _ref;\n  // Dependencies\n  const app = container.getProvider('app').getImmediate();\n  const installations = container.getProvider('installations-internal').getImmediate();\n\n  if (app.name !== DEFAULT_ENTRY_NAME) {\n    throw ERROR_FACTORY.create(\"FB not default\"\n    /* ErrorCode.FB_NOT_DEFAULT */\n    );\n  }\n\n  if (typeof window === 'undefined') {\n    throw ERROR_FACTORY.create(\"no window\"\n    /* ErrorCode.NO_WINDOW */\n    );\n  }\n\n  setupApi(window);\n  const perfInstance = new PerformanceController(app, installations);\n\n  perfInstance._init(settings);\n\n  return perfInstance;\n};\n\nfunction registerPerformance() {\n  _registerComponent(new Component('performance', factory, \"PUBLIC\"\n  /* ComponentType.PUBLIC */\n  ));\n\n  registerVersion(name, version); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n\nregisterPerformance();\nexport { getPerformance, initializePerformance, trace };","map":{"version":3,"mappings":"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","names":["SDK_VERSION","version","TRACE_START_MARK_PREFIX","TRACE_STOP_MARK_PREFIX","TRACE_MEASURE_PREFIX","OOB_TRACE_PAGE_LOAD_PREFIX","FIRST_PAINT_COUNTER_NAME","FIRST_CONTENTFUL_PAINT_COUNTER_NAME","FIRST_INPUT_DELAY_COUNTER_NAME","CONFIG_LOCAL_STORAGE_KEY","CONFIG_EXPIRY_LOCAL_STORAGE_KEY","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","ErrorFactory","consoleLogger","Logger","logLevel","LogLevel","INFO","apiInstance","windowInstance","Api","constructor","window","create","performance","PerformanceObserver","windowLocation","location","navigator","document","cookieEnabled","localStorage","perfMetrics","onFirstInputDelay","getUrl","href","split","mark","name","measure","measureName","mark1","mark2","getEntriesByType","type","getEntriesByName","getTimeOrigin","timeOrigin","timing","navigationStart","requiredApisAvailable","fetch","Promise","areCookiesEnabled","info","isIndexedDBAvailable","setupObserver","entryType","callback","observer","list","entry","getEntries","observe","entryTypes","getInstance","undefined","setupApi","iid","getIidPromise","installationsService","iidPromise","getId","then","iidVal","getIid","getAuthTokenPromise","authTokenPromise","getToken","authTokenVal","part1","part2","sizeDiff","length","resultArray","i","push","charAt","join","settingsServiceInstance","SettingsService","instrumentationEnabled","dataCollectionEnabled","loggingEnabled","tracesSamplingRate","networkRequestsSamplingRate","logEndPointUrl","mergeStrings","logSource","logTraceAfterSampling","logNetworkAfterSampling","configTimeToLive","getFlTransportFullUrl","flTransportEndpointUrl","concat","transportKey","VisibilityState","RESERVED_ATTRIBUTE_PREFIXES","ATTRIBUTE_FORMAT_REGEX","RegExp","MAX_ATTRIBUTE_NAME_LENGTH","MAX_ATTRIBUTE_VALUE_LENGTH","getServiceWorkerStatus","serviceWorker","controller","getVisibilityState","visibilityState","VISIBLE","HIDDEN","UNKNOWN","getEffectiveConnectionType","navigatorConnection","connection","effectiveType","isValidCustomAttributeName","matchesReservedPrefix","some","prefix","startsWith","match","isValidCustomAttributeValue","value","getAppId","firebaseApp","appId","options","_a","getProjectId","projectId","getApiKey","apiKey","REMOTE_CONFIG_SDK_VERSION","DEFAULT_CONFIGS","FIS_AUTH_PREFIX","performanceController","config","getStoredConfig","processConfig","resolve","getRemoteConfig","storeConfig","expiryString","getItem","configValid","configStringified","configResponse","JSON","parse","setItem","stringify","String","Date","now","COULD_NOT_GET_CONFIG_MSG","installations","authToken","app","configEndPoint","request","Request","method","headers","Authorization","body","app_instance_id","app_instance_id_token","app_id","app_version","sdk_version","response","ok","json","catch","entries","fpr_enabled","fpr_log_source","Number","fpr_log_endpoint_url","fpr_log_transport_key","fpr_vc_network_request_sampling_rate","fpr_vc_trace_sampling_rate","shouldLogAfterSampling","expiry","samplingRate","Math","random","initializationStatus","initializationPromise","getInitializationPromise","initializePerf","isPerfInitialized","getDocumentReadyComplete","getConfig","changeInitializationStatus","readyState","handler","removeEventListener","addEventListener","DEFAULT_SEND_INTERVAL_MS","INITIAL_SEND_TIME_DELAY_MS","DEFAULT_REMAINING_TRIES","MAX_EVENT_COUNT_PER_REQUEST","remainingTries","queue","isTransportSetup","setupTransportService","processQueue","timeOffset","setTimeout","dispatchQueueEvents","staged","splice","log_event","map","evt","source_extension_json_proto3","message","event_time_ms","eventTime","data","request_time_ms","client_info","client_type","js_client_info","log_source","sendEventsToFl","postToFlEndpoint","res","transportWait","nextRequestWaitMillis","requestOffset","isNaN","max","logResponseDetails","Array","isArray","responseAction","flTransportFullUrl","addToQueue","transportHandler","serializer","logger","sendLog","resource","resourceType","logTrace","trace","settingsService","isAuto","sendTraceLog","logNetworkRequest","networkRequest","networkRequestUrl","url","logEndpointUrl","flEndpointUrl","serializeNetworkRequest","serializeTrace","networkRequestMetric","http_method","httpMethod","http_response_code","response_payload_bytes","responsePayloadBytes","client_start_time_us","startTimeUs","time_to_response_initiated_us","timeToResponseInitiatedUs","time_to_response_completed_us","timeToResponseCompletedUs","perfMetric","application_info","getApplicationInfo","network_request_metric","traceMetric","is_auto","duration_us","durationUs","Object","keys","counters","customAttributes","getAttributes","custom_attributes","trace_metric","google_app_id","web_app_info","page_url","service_worker_status","visibility_state","effective_connection_type","application_process_state","MAX_METRIC_NAME_LENGTH","RESERVED_AUTO_PREFIX","oobMetrics","traceName","indexOf","convertMetricValueToInteger","providedValue","valueAsInteger","floor","Trace","traceMeasureName","traceStartMark","randomId","traceStopMark","traceMeasure","calculateTraceMetrics","start","state","api","stop","record","startTime","duration","attributes","metrics","metricName","incrementMetric","counter","numAsInteger","putMetric","isValidMetricName","customMetricName","getMetric","putAttribute","attr","isValidName","isValidValue","attributeName","attributeValue","getAttribute","removeAttribute","setStartTime","setDuration","perfMeasureEntries","perfMeasureEntry","createOobTrace","navigationTimings","paintTimings","firstInputDelay","route","timeOriginUs","domInteractive","domContentLoadedEventEnd","loadEventEnd","FIRST_PAINT","FIRST_CONTENTFUL_PAINT","firstPaint","find","paintObject","firstContentfulPaint","createUserTimingTrace","performanceEntry","responseStart","responseEnd","transferSize","FID_WAIT_TIME_MS","setupOobResources","setupOobTraces","setupNetworkRequests","setupUserTimingTraces","resources","createNetworkRequestEntry","timeoutId","fid","clearTimeout","measures","substring","PerformanceController","initialized","_init","settings","validateIndexedDBOpenable","isAvailable","error","val","DEFAULT_ENTRY_NAME","getApp","getModularInstance","provider","_getProvider","perfInstance","getImmediate","isInitialized","existingInstance","initialSettings","getOptions","deepEqual","initialize","factory","container","getProvider","registerPerformance","_registerComponent","Component","registerVersion"],"sources":["C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\constants.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\utils\\errors.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\utils\\console_logger.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\services\\api_service.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\services\\iid_service.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\utils\\string_merger.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\services\\settings_service.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\utils\\attributes_utils.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\utils\\app_utils.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\services\\remote_config_service.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\services\\initialization_service.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\services\\transport_service.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\services\\perf_logger.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\utils\\metric_utils.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\resources\\trace.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\resources\\network_request.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\services\\oob_resources_service.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\controllers\\perf.ts","C:\\Users\\devan\\Downloads\\youtube2022-react-chat\\youtube2022-react-chat\\node_modules\\@firebase\\performance\\src\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../package.json';\n\nexport const SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nexport const TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nexport const TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nexport const TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nexport const OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\n\nexport const FIRST_PAINT_COUNTER_NAME = '_fp';\n\nexport const FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\n\nexport const FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\n\nexport const CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\n\nexport const CONFIG_EXPIRY_LOCAL_STORAGE_KEY =\n  '@firebase/performance/configexpire';\n\nexport const SERVICE = 'performance';\nexport const SERVICE_NAME = 'Performance';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from '../constants';\n\nexport const enum ErrorCode {\n  TRACE_STARTED_BEFORE = 'trace started',\n  TRACE_STOPPED_BEFORE = 'trace stopped',\n  NONPOSITIVE_TRACE_START_TIME = 'nonpositive trace startTime',\n  NONPOSITIVE_TRACE_DURATION = 'nonpositive trace duration',\n  NO_WINDOW = 'no window',\n  NO_APP_ID = 'no app id',\n  NO_PROJECT_ID = 'no project id',\n  NO_API_KEY = 'no api key',\n  INVALID_CC_LOG = 'invalid cc log',\n  FB_NOT_DEFAULT = 'FB not default',\n  RC_NOT_OK = 'RC response not ok',\n  INVALID_ATTRIBUTE_NAME = 'invalid attribute name',\n  INVALID_ATTRIBUTE_VALUE = 'invalid attribute value',\n  INVALID_CUSTOM_METRIC_NAME = 'invalid custom metric name',\n  INVALID_STRING_MERGER_PARAMETER = 'invalid String merger input',\n  ALREADY_INITIALIZED = 'already initialized'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.TRACE_STARTED_BEFORE]: 'Trace {$traceName} was started before.',\n  [ErrorCode.TRACE_STOPPED_BEFORE]: 'Trace {$traceName} is not running.',\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]:\n    'Trace {$traceName} startTime should be positive.',\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]:\n    'Trace {$traceName} duration should be positive.',\n  [ErrorCode.NO_WINDOW]: 'Window is not available.',\n  [ErrorCode.NO_APP_ID]: 'App id is not available.',\n  [ErrorCode.NO_PROJECT_ID]: 'Project id is not available.',\n  [ErrorCode.NO_API_KEY]: 'Api key is not available.',\n  [ErrorCode.INVALID_CC_LOG]: 'Attempted to queue invalid cc event',\n  [ErrorCode.FB_NOT_DEFAULT]:\n    'Performance can only start when Firebase app instance is the default one.',\n  [ErrorCode.RC_NOT_OK]: 'RC response is not ok',\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]:\n    'Attribute name {$attributeName} is invalid.',\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]:\n    'Attribute value {$attributeValue} is invalid.',\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]:\n    'Custom metric name {$customMetricName} is invalid',\n  [ErrorCode.INVALID_STRING_MERGER_PARAMETER]:\n    'Input for String merger is invalid, contact support team to resolve.',\n  [ErrorCode.ALREADY_INITIALIZED]:\n    'initializePerformance() has already been called with ' +\n    'different options. To avoid this error, call initializePerformance() with the ' +\n    'same options as when it was originally called, or call getPerformance() to return the' +\n    ' already initialized instance.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.TRACE_STARTED_BEFORE]: { traceName: string };\n  [ErrorCode.TRACE_STOPPED_BEFORE]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]: { traceName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]: { attributeName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]: { attributeValue: string };\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]: { customMetricName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SERVICE_NAME } from '../constants';\n\nexport const consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { isIndexedDBAvailable, areCookiesEnabled } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\n\ndeclare global {\n  interface Window {\n    PerformanceObserver: typeof PerformanceObserver;\n    perfMetrics?: { onFirstInputDelay(fn: (fid: number) => void): void };\n  }\n}\n\nlet apiInstance: Api | undefined;\nlet windowInstance: Window | undefined;\n\nexport type EntryType =\n  | 'mark'\n  | 'measure'\n  | 'paint'\n  | 'resource'\n  | 'frame'\n  | 'navigation';\n\n/**\n * This class holds a reference to various browser related objects injected by\n * set methods.\n */\nexport class Api {\n  private readonly performance: Performance;\n  /** PreformanceObserver constructor function. */\n  private readonly PerformanceObserver: typeof PerformanceObserver;\n  private readonly windowLocation: Location;\n  readonly onFirstInputDelay?: (fn: (fid: number) => void) => void;\n  readonly localStorage?: Storage;\n  readonly document: Document;\n  readonly navigator: Navigator;\n\n  constructor(readonly window?: Window) {\n    if (!window) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  getUrl(): string {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name: string): void {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n\n  measure(measureName: string, mark1: string, mark2: string): void {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type: EntryType): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name: string): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin(): number {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return (\n      this.performance &&\n      (this.performance.timeOrigin || this.performance.timing.navigationStart)\n    );\n  }\n\n  requiredApisAvailable(): boolean {\n    if (!fetch || !Promise || !areCookiesEnabled()) {\n      consoleLogger.info(\n        'Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.'\n      );\n      return false;\n    }\n\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n    return true;\n  }\n\n  setupObserver(\n    entryType: EntryType,\n    callback: (entry: PerformanceEntry) => void\n  ): void {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n\n    // Start observing the entry types you care about.\n    observer.observe({ entryTypes: [entryType] });\n  }\n\n  static getInstance(): Api {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\n\nexport function setupApi(window: Window): void {\n  windowInstance = window;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\n\nlet iid: string | undefined;\nlet authToken: string | undefined;\n\nexport function getIidPromise(\n  installationsService: _FirebaseInstallationsInternal\n): Promise<string> {\n  const iidPromise = installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then((iidVal: string) => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n\n// This method should be used after the iid is retrieved by getIidPromise method.\nexport function getIid(): string | undefined {\n  return iid;\n}\n\nexport function getAuthTokenPromise(\n  installationsService: _FirebaseInstallationsInternal\n): Promise<string> {\n  const authTokenPromise = installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then((authTokenVal: string) => {\n    authToken = authTokenVal;\n  });\n  return authTokenPromise;\n}\n\nexport function getAuthenticationToken(): string | undefined {\n  return authToken;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\n\nexport function mergeStrings(part1: string, part2: string): string {\n  const sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_STRING_MERGER_PARAMETER);\n  }\n\n  const resultArray = [];\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { mergeStrings } from '../utils/string_merger';\n\nlet settingsServiceInstance: SettingsService | undefined;\n\nexport class SettingsService {\n  // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n  instrumentationEnabled = true;\n\n  // The variable which controls logging of custom traces.\n  dataCollectionEnabled = true;\n\n  // Configuration flags set through remote config.\n  loggingEnabled = false;\n  // Sampling rate between 0 and 1.\n  tracesSamplingRate = 1;\n  networkRequestsSamplingRate = 1;\n\n  // Address of logging service.\n  logEndPointUrl =\n    'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n  // Performance event transport endpoint URL which should be compatible with proto3.\n  // New Address for transport service, not configurable via Remote Config.\n  flTransportEndpointUrl = mergeStrings(\n    'hts/frbslgigp.ogepscmv/ieo/eaylg',\n    'tp:/ieaeogn-agolai.o/1frlglgc/o'\n  );\n\n  transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n\n  // Source type for performance event logs.\n  logSource = 462;\n\n  // Flags which control per session logging of traces and network requests.\n  logTraceAfterSampling = false;\n  logNetworkAfterSampling = false;\n\n  // TTL of config retrieved from remote config in hours.\n  configTimeToLive = 12;\n\n  getFlTransportFullUrl(): string {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n\n  static getInstance(): SettingsService {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\n\n// The values and orders of the following enums should not be changed.\nconst enum ServiceWorkerStatus {\n  UNKNOWN = 0,\n  UNSUPPORTED = 1,\n  CONTROLLED = 2,\n  UNCONTROLLED = 3\n}\n\nexport enum VisibilityState {\n  UNKNOWN = 0,\n  VISIBLE = 1,\n  HIDDEN = 2\n}\n\nconst enum EffectiveConnectionType {\n  UNKNOWN = 0,\n  CONNECTION_SLOW_2G = 1,\n  CONNECTION_2G = 2,\n  CONNECTION_3G = 3,\n  CONNECTION_4G = 4\n}\n\n/**\n * NetworkInformation\n *\n * ref: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\ninterface NetworkInformationWithEffectiveType extends NetworkInformation {\n  // `effectiveType` is an experimental property and not included in\n  // TypeScript's typings for the native NetworkInformation interface\n  readonly effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n}\n\ninterface NavigatorWithConnection extends Navigator {\n  readonly connection: NetworkInformationWithEffectiveType;\n}\n\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nexport function getServiceWorkerStatus(): ServiceWorkerStatus {\n  const navigator = Api.getInstance().navigator;\n  if (navigator?.serviceWorker) {\n    if (navigator.serviceWorker.controller) {\n      return ServiceWorkerStatus.CONTROLLED;\n    } else {\n      return ServiceWorkerStatus.UNCONTROLLED;\n    }\n  } else {\n    return ServiceWorkerStatus.UNSUPPORTED;\n  }\n}\n\nexport function getVisibilityState(): VisibilityState {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nexport function getEffectiveConnectionType(): EffectiveConnectionType {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = (navigator as NavigatorWithConnection).connection;\n  const effectiveType =\n    navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return EffectiveConnectionType.CONNECTION_SLOW_2G;\n    case '2g':\n      return EffectiveConnectionType.CONNECTION_2G;\n    case '3g':\n      return EffectiveConnectionType.CONNECTION_3G;\n    case '4g':\n      return EffectiveConnectionType.CONNECTION_4G;\n    default:\n      return EffectiveConnectionType.UNKNOWN;\n  }\n}\n\nexport function isValidCustomAttributeName(name: string): boolean {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix =>\n    name.startsWith(prefix)\n  );\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nexport function isValidCustomAttributeValue(value: string): boolean {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\nimport { FirebaseApp } from '@firebase/app';\n\nexport function getAppId(firebaseApp: FirebaseApp): string {\n  const appId = firebaseApp.options?.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_APP_ID);\n  }\n  return appId;\n}\n\nexport function getProjectId(firebaseApp: FirebaseApp): string {\n  const projectId = firebaseApp.options?.projectId;\n  if (!projectId) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_PROJECT_ID);\n  }\n  return projectId;\n}\n\nexport function getApiKey(firebaseApp: FirebaseApp): string {\n  const apiKey = firebaseApp.options?.apiKey;\n  if (!apiKey) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_API_KEY);\n  }\n  return apiKey;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n  CONFIG_LOCAL_STORAGE_KEY,\n  SDK_VERSION\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nimport { Api } from './api_service';\nimport { getAuthTokenPromise } from './iid_service';\nimport { SettingsService } from './settings_service';\nimport { PerformanceController } from '../controllers/perf';\nimport { getProjectId, getApiKey, getAppId } from '../utils/app_utils';\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n\ninterface SecondaryConfig {\n  loggingEnabled?: boolean;\n  logSource?: number;\n  logEndPointUrl?: string;\n  transportKey?: string;\n  tracesSamplingRate?: number;\n  networkRequestsSamplingRate?: number;\n}\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst DEFAULT_CONFIGS: SecondaryConfig = {\n  loggingEnabled: true\n};\n\n/* eslint-disable camelcase */\ninterface RemoteConfigTemplate {\n  fpr_enabled?: string;\n  fpr_log_source?: string;\n  fpr_log_endpoint_url?: string;\n  fpr_log_transport_key?: string;\n  fpr_log_transport_web_percent?: string;\n  fpr_vc_network_request_sampling_rate?: string;\n  fpr_vc_trace_sampling_rate?: string;\n  fpr_vc_session_sampling_rate?: string;\n}\n/* eslint-enable camelcase */\n\ninterface RemoteConfigResponse {\n  entries?: RemoteConfigTemplate;\n  state?: string;\n}\n\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nexport function getConfig(\n  performanceController: PerformanceController,\n  iid: string\n): Promise<void> {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(performanceController, iid)\n    .then(processConfig)\n    .then(\n      config => storeConfig(config),\n      /** Do nothing for error, use defaults set in settings service. */\n      () => {}\n    );\n}\n\nfunction getStoredConfig(): RemoteConfigResponse | undefined {\n  const localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse: RemoteConfigResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch {\n    return;\n  }\n}\n\nfunction storeConfig(config: RemoteConfigResponse | undefined): void {\n  const localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(\n    CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n    String(\n      Date.now() +\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000\n    )\n  );\n}\n\nconst COULD_NOT_GET_CONFIG_MSG =\n  'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(\n  performanceController: PerformanceController,\n  iid: string\n): Promise<RemoteConfigResponse | undefined> {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise(performanceController.installations)\n    .then(authToken => {\n      const projectId = getProjectId(performanceController.app);\n      const apiKey = getApiKey(performanceController.app);\n      const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${apiKey}`;\n      const request = new Request(configEndPoint, {\n        method: 'POST',\n        headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\n        /* eslint-disable camelcase */\n        body: JSON.stringify({\n          app_instance_id: iid,\n          app_instance_id_token: authToken,\n          app_id: getAppId(performanceController.app),\n          app_version: SDK_VERSION,\n          sdk_version: REMOTE_CONFIG_SDK_VERSION\n        })\n        /* eslint-enable camelcase */\n      });\n      return fetch(request).then(response => {\n        if (response.ok) {\n          return response.json() as RemoteConfigResponse;\n        }\n        // In case response is not ok. This will be caught by catch.\n        throw ERROR_FACTORY.create(ErrorCode.RC_NOT_OK);\n      });\n    })\n    .catch(() => {\n      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n      return undefined;\n    });\n}\n\n/**\n * Processes config coming either from calling RC or from local storage.\n * This method only runs if call is successful or config in storage\n * is valid.\n */\nfunction processConfig(\n  config?: RemoteConfigResponse\n): RemoteConfigResponse | undefined {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled =\n      String(entries.fpr_enabled) === 'true';\n  } else if (DEFAULT_CONFIGS.loggingEnabled !== undefined) {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(\n      entries.fpr_vc_network_request_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate =\n      DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(\n      entries.fpr_vc_trace_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate =\n      DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.tracesSamplingRate\n  );\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.networkRequestsSamplingRate\n  );\n  return config;\n}\n\nfunction configValid(expiry: string): boolean {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate: number): boolean {\n  return Math.random() <= samplingRate;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIidPromise } from './iid_service';\nimport { getConfig } from './remote_config_service';\nimport { Api } from './api_service';\nimport { PerformanceController } from '../controllers/perf';\n\nconst enum InitializationStatus {\n  notInitialized = 1,\n  initializationPending,\n  initialized\n}\n\nlet initializationStatus = InitializationStatus.notInitialized;\n\nlet initializationPromise: Promise<void> | undefined;\n\nexport function getInitializationPromise(\n  performanceController: PerformanceController\n): Promise<void> {\n  initializationStatus = InitializationStatus.initializationPending;\n\n  initializationPromise =\n    initializationPromise || initializePerf(performanceController);\n\n  return initializationPromise;\n}\n\nexport function isPerfInitialized(): boolean {\n  return initializationStatus === InitializationStatus.initialized;\n}\n\nfunction initializePerf(\n  performanceController: PerformanceController\n): Promise<void> {\n  return getDocumentReadyComplete()\n    .then(() => getIidPromise(performanceController.installations))\n    .then(iid => getConfig(performanceController, iid))\n    .then(\n      () => changeInitializationStatus(),\n      () => changeInitializationStatus()\n    );\n}\n\n/**\n * Returns a promise which resolves whenever the document readystate is complete or\n * immediately if it is called after page load complete.\n */\nfunction getDocumentReadyComplete(): Promise<void> {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = (): void => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus(): void {\n  initializationStatus = InitializationStatus.initialized;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsService } from './settings_service';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nconst DEFAULT_REMAINING_TRIES = 3;\nconst MAX_EVENT_COUNT_PER_REQUEST = 1000;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n\ninterface LogResponseDetails {\n  responseAction?: string;\n}\n\ninterface BatchEvent {\n  message: string;\n  eventTime: number;\n}\n\n/* eslint-disable camelcase */\n// CC/Fl accepted log format.\ninterface TransportBatchLogFormat {\n  request_time_ms: string;\n  client_info: ClientInfo;\n  log_source: number;\n  log_event: Log[];\n}\n\ninterface ClientInfo {\n  client_type: number;\n  js_client_info: {};\n}\n\ninterface Log {\n  source_extension_json_proto3: string;\n  event_time_ms: string;\n}\n/* eslint-enable camelcase */\n\nlet queue: BatchEvent[] = [];\n\nlet isTransportSetup: boolean = false;\n\nexport function setupTransportService(): void {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\n/**\n * Utilized by testing to clean up message queue and un-initialize transport service.\n */\nexport function resetTransportService(): void {\n  isTransportSetup = false;\n  queue = [];\n}\n\nfunction processQueue(timeOffset: number): void {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents(): void {\n  // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\n  // The staged events will be used for current logRequest attempt, remaining events will be kept\n  // for next attempt.\n  const staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\n\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  const log_event: Log[] = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n\n  const data: TransportBatchLogFormat = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1, // 1 is JS\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n\n  sendEventsToFl(data, staged).catch(() => {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [...staged, ...queue];\n    remainingTries--;\n    consoleLogger.info(`Tries left: ${remainingTries}.`);\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction sendEventsToFl(\n  data: TransportBatchLogFormat,\n  staged: BatchEvent[]\n): Promise<void> {\n  return postToFlEndpoint(data)\n    .then(res => {\n      if (!res.ok) {\n        consoleLogger.info('Call to Firebase backend failed.');\n      }\n      return res.json();\n    })\n    .then(res => {\n      // Find the next call wait time from the response.\n      const transportWait = Number(res.nextRequestWaitMillis);\n      let requestOffset = DEFAULT_SEND_INTERVAL_MS;\n      if (!isNaN(transportWait)) {\n        requestOffset = Math.max(transportWait, requestOffset);\n      }\n\n      // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n      // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n      const logResponseDetails: LogResponseDetails[] = res.logResponseDetails;\n      if (\n        Array.isArray(logResponseDetails) &&\n        logResponseDetails.length > 0 &&\n        logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER'\n      ) {\n        queue = [...staged, ...queue];\n        consoleLogger.info(`Retry transport request later.`);\n      }\n\n      remainingTries = DEFAULT_REMAINING_TRIES;\n      // Schedule the next process.\n      processQueue(requestOffset);\n    });\n}\n\nfunction postToFlEndpoint(data: TransportBatchLogFormat): Promise<Response> {\n  const flTransportFullUrl =\n    SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt: BatchEvent): void {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_CC_LOG);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n\n/** Log handler for cc service to send the performance logs to the server. */\nexport function transportHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serializer: (...args: any[]) => string\n): (...args: unknown[]) => void {\n  return (...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIid } from './iid_service';\nimport { NetworkRequest } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { Api } from './api_service';\nimport { SettingsService } from './settings_service';\nimport {\n  getServiceWorkerStatus,\n  getVisibilityState,\n  VisibilityState,\n  getEffectiveConnectionType\n} from '../utils/attributes_utils';\nimport {\n  isPerfInitialized,\n  getInitializationPromise\n} from './initialization_service';\nimport { transportHandler } from './transport_service';\nimport { SDK_VERSION } from '../constants';\nimport { FirebaseApp } from '@firebase/app';\nimport { getAppId } from '../utils/app_utils';\n\nconst enum ResourceType {\n  NetworkRequest,\n  Trace\n}\n\n/* eslint-disable camelcase */\ninterface ApplicationInfo {\n  google_app_id: string;\n  app_instance_id?: string;\n  web_app_info: WebAppInfo;\n  application_process_state: number;\n}\n\ninterface WebAppInfo {\n  sdk_version: string;\n  page_url: string;\n  service_worker_status: number;\n  visibility_state: number;\n  effective_connection_type: number;\n}\n\ninterface PerfNetworkLog {\n  application_info: ApplicationInfo;\n  network_request_metric: NetworkRequestMetric;\n}\n\ninterface PerfTraceLog {\n  application_info: ApplicationInfo;\n  trace_metric: TraceMetric;\n}\n\ninterface NetworkRequestMetric {\n  url: string;\n  http_method: number;\n  http_response_code: number;\n  response_payload_bytes?: number;\n  client_start_time_us?: number;\n  time_to_response_initiated_us?: number;\n  time_to_response_completed_us?: number;\n}\n\ninterface TraceMetric {\n  name: string;\n  is_auto: boolean;\n  client_start_time_us: number;\n  duration_us: number;\n  counters?: { [key: string]: number };\n  custom_attributes?: { [key: string]: string };\n}\n\n/* eslint-enble camelcase */\n\nlet logger: (\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n) => void | undefined;\n// This method is not called before initialization.\nfunction sendLog(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): void {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\n\nexport function logTrace(trace: Trace): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise(trace.performanceController).then(\n      () => sendTraceLog(trace),\n      () => sendTraceLog(trace)\n    );\n  }\n}\n\nfunction sendTraceLog(trace: Trace): void {\n  if (!getIid()) {\n    return;\n  }\n\n  const settingsService = SettingsService.getInstance();\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logTraceAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(trace, ResourceType.Trace), 0);\n}\n\nexport function logNetworkRequest(networkRequest: NetworkRequest): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  const networkRequestUrl = networkRequest.url;\n\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (\n    networkRequestUrl === logEndpointUrl ||\n    networkRequestUrl === flEndpointUrl\n  ) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logNetworkAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(networkRequest, ResourceType.NetworkRequest), 0);\n}\n\nfunction serializer(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): string {\n  if (resourceType === ResourceType.NetworkRequest) {\n    return serializeNetworkRequest(resource as NetworkRequest);\n  }\n  return serializeTrace(resource as Trace);\n}\n\nfunction serializeNetworkRequest(networkRequest: NetworkRequest): string {\n  const networkRequestMetric: NetworkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric: PerfNetworkLog = {\n    application_info: getApplicationInfo(\n      networkRequest.performanceController.app\n    ),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace: Trace): string {\n  const traceMetric: TraceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  const perfMetric: PerfTraceLog = {\n    application_info: getApplicationInfo(trace.performanceController.app),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(firebaseApp: FirebaseApp): ApplicationInfo {\n  return {\n    google_app_id: getAppId(firebaseApp),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  OOB_TRACE_PAGE_LOAD_PREFIX\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n];\n\n/**\n * Returns true if the metric is custom and does not start with reserved prefix, or if\n * the metric is one of out of the box page load trace metrics.\n */\nexport function isValidMetricName(name: string, traceName?: string): boolean {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return (\n    (traceName &&\n      traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\n      oobMetrics.indexOf(name) > -1) ||\n    !name.startsWith(RESERVED_AUTO_PREFIX)\n  );\n}\n\n/**\n * Converts the provided value to an integer value to be used in case of a metric.\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\n *\n * @returns Converted integer number to be set for the metric.\n */\nexport function convertMetricValueToInteger(providedValue: number): number {\n  const valueAsInteger: number = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\n      `Metric value should be an Integer, setting the value as : ${valueAsInteger}.`\n    );\n  }\n  return valueAsInteger;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TRACE_START_MARK_PREFIX,\n  TRACE_STOP_MARK_PREFIX,\n  TRACE_MEASURE_PREFIX,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n} from '../constants';\nimport { Api } from '../services/api_service';\nimport { logTrace } from '../services/perf_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport {\n  isValidCustomAttributeName,\n  isValidCustomAttributeValue\n} from '../utils/attributes_utils';\nimport {\n  isValidMetricName,\n  convertMetricValueToInteger\n} from '../utils/metric_utils';\nimport { PerformanceTrace } from '../public_types';\nimport { PerformanceController } from '../controllers/perf';\n\nconst enum TraceState {\n  UNINITIALIZED = 1,\n  RUNNING,\n  TERMINATED\n}\n\nexport class Trace implements PerformanceTrace {\n  private state: TraceState = TraceState.UNINITIALIZED;\n  startTimeUs!: number;\n  durationUs!: number;\n  private customAttributes: { [key: string]: string } = {};\n  counters: { [counterName: string]: number } = {};\n  private api = Api.getInstance();\n  private randomId = Math.floor(Math.random() * 1000000);\n  private traceStartMark!: string;\n  private traceStopMark!: string;\n  private traceMeasure!: string;\n\n  /**\n   * @param performanceController The performance controller running.\n   * @param name The name of the trace.\n   * @param isAuto If the trace is auto-instrumented.\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\n   * is only set when the trace is built for logging when the user directly uses the user timing\n   * api (performance.mark and performance.measure).\n   */\n  constructor(\n    readonly performanceController: PerformanceController,\n    readonly name: string,\n    readonly isAuto = false,\n    traceMeasureName?: string\n  ) {\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure =\n        traceMeasureName ||\n        `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n\n  /**\n   * Starts a trace. The measurement of the duration starts at this point.\n   */\n  start(): void {\n    if (this.state !== TraceState.UNINITIALIZED) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STARTED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = TraceState.RUNNING;\n  }\n\n  /**\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\n   * is logged.\n   */\n  stop(): void {\n    if (this.state !== TraceState.RUNNING) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STOPPED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.state = TraceState.TERMINATED;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(\n      this.traceMeasure,\n      this.traceStartMark,\n      this.traceStopMark\n    );\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n\n  /**\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\n   * directly. No need to use start and stop methods.\n   * @param startTime Trace start time since epoch in millisec\n   * @param duration The duraction of the trace in millisec\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\n   */\n  record(\n    startTime: number,\n    duration: number,\n    options?: {\n      metrics?: { [key: string]: number };\n      attributes?: { [key: string]: string };\n    }\n  ): void {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_START_TIME, {\n        traceName: this.name\n      });\n    }\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_DURATION, {\n        traceName: this.name\n      });\n    }\n\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = { ...options.attributes };\n    }\n    if (options && options.metrics) {\n      for (const metricName of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metricName]))) {\n          this.counters[metricName] = Math.floor(\n            Number(options.metrics[metricName])\n          );\n        }\n      }\n    }\n    logTrace(this);\n  }\n\n  /**\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\n   * custom metric if one with the given name does not exist. The value will be floored down to an\n   * integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Increment by value\n   */\n  incrementMetric(counter: string, numAsInteger = 1): void {\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  }\n\n  /**\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\n   * given name does not exist. The value will be floored down to an integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Set custom metric to this value\n   */\n  putMetric(counter: string, numAsInteger: number): void {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger ?? 0);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_CUSTOM_METRIC_NAME, {\n        customMetricName: counter\n      });\n    }\n  }\n\n  /**\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\n   * not exist will return zero.\n   * @param counter\n   */\n  getMetric(counter: string): number {\n    return this.counters[counter] || 0;\n  }\n\n  /**\n   * Sets a custom attribute of a trace to a certain value.\n   * @param attr\n   * @param value\n   */\n  putAttribute(attr: string, value: string): void {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_NAME, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_VALUE, {\n        attributeValue: value\n      });\n    }\n  }\n\n  /**\n   * Retrieves the value a custom attribute of a trace is set to.\n   * @param attr\n   */\n  getAttribute(attr: string): string | undefined {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr: string): void {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes(): { [key: string]: string } {\n    return { ...this.customAttributes };\n  }\n\n  private setStartTime(startTime: number): void {\n    this.startTimeUs = startTime;\n  }\n\n  private setDuration(duration: number): void {\n    this.durationUs = duration;\n  }\n\n  /**\n   * Calculates and assigns the duration and start time of the trace using the measure performance\n   * entry.\n   */\n  private calculateTraceMetrics(): void {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor(\n        (perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000\n      );\n    }\n  }\n\n  /**\n   * @param navigationTimings A single element array which contains the navigationTIming object of\n   * the page load\n   * @param paintTimings A array which contains paintTiming object of the page load\n   * @param firstInputDelay First input delay in millisec\n   */\n  static createOobTrace(\n    performanceController: PerformanceController,\n    navigationTimings: PerformanceNavigationTiming[],\n    paintTimings: PerformanceEntry[],\n    firstInputDelay?: number\n  ): void {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(\n      performanceController,\n      OOB_TRACE_PAGE_LOAD_PREFIX + route,\n      true\n    );\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric(\n        'domInteractive',\n        Math.floor(navigationTimings[0].domInteractive * 1000)\n      );\n      trace.putMetric(\n        'domContentLoadedEventEnd',\n        Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000)\n      );\n      trace.putMetric(\n        'loadEventEnd',\n        Math.floor(navigationTimings[0].loadEventEnd * 1000)\n      );\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_PAINT\n      );\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(\n          FIRST_PAINT_COUNTER_NAME,\n          Math.floor(firstPaint.startTime * 1000)\n        );\n      }\n      const firstContentfulPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT\n      );\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(\n          FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n          Math.floor(firstContentfulPaint.startTime * 1000)\n        );\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(\n          FIRST_INPUT_DELAY_COUNTER_NAME,\n          Math.floor(firstInputDelay * 1000)\n        );\n      }\n    }\n\n    logTrace(trace);\n  }\n\n  static createUserTimingTrace(\n    performanceController: PerformanceController,\n    measureName: string\n  ): void {\n    const trace = new Trace(\n      performanceController,\n      measureName,\n      false,\n      measureName\n    );\n    logTrace(trace);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\nimport { logNetworkRequest } from '../services/perf_logger';\nimport { PerformanceController } from '../controllers/perf';\n\n// The order of values of this enum should not be changed.\nexport const enum HttpMethod {\n  HTTP_METHOD_UNKNOWN = 0,\n  GET = 1,\n  PUT = 2,\n  POST = 3,\n  DELETE = 4,\n  HEAD = 5,\n  PATCH = 6,\n  OPTIONS = 7,\n  TRACE = 8,\n  CONNECT = 9\n}\n\n// Durations are in microseconds.\nexport interface NetworkRequest {\n  performanceController: PerformanceController;\n  url: string;\n  httpMethod?: HttpMethod;\n  requestPayloadBytes?: number;\n  responsePayloadBytes?: number;\n  httpResponseCode?: number;\n  responseContentType?: string;\n  startTimeUs?: number;\n  timeToRequestCompletedUs?: number;\n  timeToResponseInitiatedUs?: number;\n  timeToResponseCompletedUs?: number;\n}\n\nexport function createNetworkRequestEntry(\n  performanceController: PerformanceController,\n  entry: PerformanceEntry\n): void {\n  const performanceEntry = entry as PerformanceResourceTiming;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor(\n    (performanceEntry.startTime + timeOrigin) * 1000\n  );\n  const timeToResponseInitiatedUs = performanceEntry.responseStart\n    ? Math.floor(\n        (performanceEntry.responseStart - performanceEntry.startTime) * 1000\n      )\n    : undefined;\n  const timeToResponseCompletedUs = Math.floor(\n    (performanceEntry.responseEnd - performanceEntry.startTime) * 1000\n  );\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest: NetworkRequest = {\n    performanceController,\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n\n  logNetworkRequest(networkRequest);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from './api_service';\nimport { Trace } from '../resources/trace';\nimport { createNetworkRequestEntry } from '../resources/network_request';\nimport { TRACE_MEASURE_PREFIX } from '../constants';\nimport { getIid } from './iid_service';\nimport { PerformanceController } from '../controllers/perf';\n\nconst FID_WAIT_TIME_MS = 5000;\n\nexport function setupOobResources(\n  performanceController: PerformanceController\n): void {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(() => setupOobTraces(performanceController), 0);\n  setTimeout(() => setupNetworkRequests(performanceController), 0);\n  setTimeout(() => setupUserTimingTraces(performanceController), 0);\n}\n\nfunction setupNetworkRequests(\n  performanceController: PerformanceController\n): void {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(performanceController, resource);\n  }\n  api.setupObserver('resource', entry =>\n    createNetworkRequestEntry(performanceController, entry)\n  );\n}\n\nfunction setupOobTraces(performanceController: PerformanceController): void {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType(\n    'navigation'\n  ) as PerformanceNavigationTiming[];\n  const paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId: any = setTimeout(() => {\n      Trace.createOobTrace(\n        performanceController,\n        navigationTimings,\n        paintTimings\n      );\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay((fid: number) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(\n          performanceController,\n          navigationTimings,\n          paintTimings,\n          fid\n        );\n      }\n    });\n  } else {\n    Trace.createOobTrace(\n      performanceController,\n      navigationTimings,\n      paintTimings\n    );\n  }\n}\n\nfunction setupUserTimingTraces(\n  performanceController: PerformanceController\n): void {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(performanceController, measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', entry =>\n    createUserTimingTrace(performanceController, entry)\n  );\n}\n\nfunction createUserTimingTrace(\n  performanceController: PerformanceController,\n  measure: PerformanceEntry\n): void {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (\n    measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\n    TRACE_MEASURE_PREFIX\n  ) {\n    return;\n  }\n  Trace.createUserTimingTrace(performanceController, measureName);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { setupOobResources } from '../services/oob_resources_service';\nimport { SettingsService } from '../services/settings_service';\nimport { getInitializationPromise } from '../services/initialization_service';\nimport { Api } from '../services/api_service';\nimport { FirebaseApp } from '@firebase/app';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { PerformanceSettings, FirebasePerformance } from '../public_types';\nimport { validateIndexedDBOpenable } from '@firebase/util';\nimport { setupTransportService } from '../services/transport_service';\nimport { consoleLogger } from '../utils/console_logger';\n\nexport class PerformanceController implements FirebasePerformance {\n  private initialized: boolean = false;\n\n  constructor(\n    readonly app: FirebaseApp,\n    readonly installations: _FirebaseInstallationsInternal\n  ) {}\n\n  /**\n   * This method *must* be called internally as part of creating a\n   * PerformanceController instance.\n   *\n   * Currently it's not possible to pass the settings object through the\n   * constructor using Components, so this method exists to be called with the\n   * desired settings, to ensure nothing is collected without the user's\n   * consent.\n   */\n  _init(settings?: PerformanceSettings): void {\n    if (this.initialized) {\n      return;\n    }\n\n    if (settings?.dataCollectionEnabled !== undefined) {\n      this.dataCollectionEnabled = settings.dataCollectionEnabled;\n    }\n    if (settings?.instrumentationEnabled !== undefined) {\n      this.instrumentationEnabled = settings.instrumentationEnabled;\n    }\n\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable()\n        .then(isAvailable => {\n          if (isAvailable) {\n            setupTransportService();\n            getInitializationPromise(this).then(\n              () => setupOobResources(this),\n              () => setupOobResources(this)\n            );\n            this.initialized = true;\n          }\n        })\n        .catch(error => {\n          consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\n        });\n    } else {\n      consoleLogger.info(\n        'Firebase Performance cannot start if the browser does not support ' +\n          '\"Fetch\" and \"Promise\", or cookies are disabled.'\n      );\n    }\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled(): boolean {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled(): boolean {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n","/**\n * Firebase Performance Monitoring\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebasePerformance,\n  PerformanceSettings,\n  PerformanceTrace\n} from './public_types';\nimport { ERROR_FACTORY, ErrorCode } from './utils/errors';\nimport { setupApi } from './services/api_service';\nimport { PerformanceController } from './controllers/perf';\nimport {\n  _registerComponent,\n  _getProvider,\n  registerVersion,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport {\n  InstanceFactory,\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { name, version } from '../package.json';\nimport { Trace } from './resources/trace';\nimport '@firebase/installations';\nimport { deepEqual, getModularInstance } from '@firebase/util';\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\n * Returns a {@link FirebasePerformance} instance for the given app.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @public\n */\nexport function getPerformance(\n  app: FirebaseApp = getApp()\n): FirebasePerformance {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'performance');\n  const perfInstance = provider.getImmediate() as PerformanceController;\n  return perfInstance;\n}\n\n/**\n * Returns a {@link FirebasePerformance} instance for the given app. Can only be called once.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @param settings - Optional settings for the {@link FirebasePerformance} instance.\n * @public\n */\nexport function initializePerformance(\n  app: FirebaseApp,\n  settings?: PerformanceSettings\n): FirebasePerformance {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'performance');\n\n  // throw if an instance was already created.\n  // It could happen if initializePerformance() is called more than once, or getPerformance() is called first.\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialSettings = provider.getOptions() as PerformanceSettings;\n    if (deepEqual(initialSettings, settings ?? {})) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.ALREADY_INITIALIZED);\n    }\n  }\n\n  const perfInstance = provider.initialize({\n    options: settings\n  }) as PerformanceController;\n  return perfInstance;\n}\n\n/**\n * Returns a new `PerformanceTrace` instance.\n * @param performance - The {@link FirebasePerformance} instance to use.\n * @param name - The name of the trace.\n * @public\n */\nexport function trace(\n  performance: FirebasePerformance,\n  name: string\n): PerformanceTrace {\n  performance = getModularInstance(performance);\n  return new Trace(performance as PerformanceController, name);\n}\n\nconst factory: InstanceFactory<'performance'> = (\n  container: ComponentContainer,\n  { options: settings }: { options?: PerformanceSettings }\n) => {\n  // Dependencies\n  const app = container.getProvider('app').getImmediate();\n  const installations = container\n    .getProvider('installations-internal')\n    .getImmediate();\n\n  if (app.name !== DEFAULT_ENTRY_NAME) {\n    throw ERROR_FACTORY.create(ErrorCode.FB_NOT_DEFAULT);\n  }\n  if (typeof window === 'undefined') {\n    throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n  }\n  setupApi(window);\n  const perfInstance = new PerformanceController(app, installations);\n  perfInstance._init(settings);\n\n  return perfInstance;\n};\n\nfunction registerPerformance(): void {\n  _registerComponent(\n    new Component('performance', factory, ComponentType.PUBLIC)\n  );\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterPerformance();\n\nexport { FirebasePerformance, PerformanceSettings, PerformanceTrace };\n"]},"metadata":{},"sourceType":"module"}